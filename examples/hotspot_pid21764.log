<?xml version='1.0' encoding='UTF-8'?>
<hotspot_log version='160 1' process='21764' time_ms='1422726384520'>
<vm_version>
<name>
OpenJDK 64-Bit Server VM
</name>
<release>
1.9.0-internal-debug-simonis_2015_01_02_10_49-b00
</release>
<info>
OpenJDK 64-Bit Server VM (1.9.0-internal-debug-simonis_2015_01_02_10_49-b00) for linux-amd64 JRE (1.9.0-internal-simonis_2015_01_02_10_49-b00), built on Jan 30 2015 14:02:27 by &quot;simonis&quot; with gcc 4.8.2
</info>
</vm_version>
<vm_arguments>
<args>
-XX:+PrintOptoAssembly -XX:CompileCommand=print AtomicLongTest.update -XX:-TieredCompilation -XX:-UseOnStackReplacement -XX:CICompilerCount=1 -XX:-UseCompressedOops -Xbatch 
</args>
<command>
AtomicLongTest 22000
</command>
<launcher>
SUN_STANDARD
</launcher>
<properties>
java.vm.specification.name=Java Virtual Machine Specification
java.vm.version=1.9.0-internal-debug-simonis_2015_01_02_10_49-b00
java.vm.name=OpenJDK 64-Bit Server VM
java.vm.info=mixed mode, sharing
sun.boot.library.path=/share/output-jdk9-dev-dbg/images/jdk/lib/amd64
java.library.path=/share/OpenJDK/hsdis:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib
java.home=/share/output-jdk9-dev-dbg/images/jdk
java.class.path=.
sun.boot.class.path=/share/output-jdk9-dev-dbg/images/jdk/lib/modules/bootmodules.jimage
java.vm.specification.vendor=Oracle Corporation
java.vm.specification.version=1.9
java.vm.vendor=Oracle Corporation
sun.java.command=AtomicLongTest 22000
sun.java.launcher=SUN_STANDARD
</properties>
</vm_arguments>
<tty>
<writer thread='140737354000128'/>
CompilerOracle: print AtomicLongTest.update
<blob name='MethodHandlesAdapterBlob' size='182000'>
<sect index='1' size='182000' free='178432'/>
</blob>
<writer thread='140735989044992'/>
<opto_assembly compile_id='1'>
{method}
 - this oop:          0x00007fffaca97a88
 - method holder:     &apos;sun/nio/cs/UTF_8$Decoder&apos;
 - constants:         0x00007fffaca951f0 constant pool [258] {0x00007fffaca951f0} for &apos;sun/nio/cs/UTF_8$Decoder&apos; cache=0x00007fffaca9ab18
 - access:            0xc1000001  public 
 - name:              &apos;decode&apos;
 - signature:         &apos;([BII[C)I&apos;
 - max stack:         5
 - max locals:        14
 - size of params:    5
 - method size:       12
 - vtable index:      17
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00c88a8: 0xbbaab000 i2c: 0x00007fffed149f20 c2i: 0x00007fffed14a066 c2iUV: 0x00007fffed14a03c
 - compiled entry     0x00007fffed14a066
 - code size:         779
 - code start:        0x00007fffaca97648
 - code end (excl):   0x00007fffaca97953
 - method data:       0x00007fffacbd34e0
 - checked ex length: 0
 - linenumber start:  0x00007fffaca97953
 - localvar length:   18
 - localvar start:    0x00007fffaca979ae
#
#  int ( sun/nio/cs/UTF_8$Decoder:NotNull *, byte[int:&gt;=0]:exact *, int, int, char[int:&gt;=0]:exact * )
#
#r018 rsi:rsi   : parm 0: sun/nio/cs/UTF_8$Decoder:NotNull *
#r016 rdx:rdx   : parm 1: byte[int:&gt;=0]:exact *
#r010 rcx   : parm 2: int
#r004 r8   : parm 3: int
#r006 r9:r9   : parm 4: char[int:&gt;=0]:exact *
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N365: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   		cmpq    rax, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 4 bytes pad for loops and calls

010   B1: #	B36 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (232 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

01c   	movq    [rsp + #16], RSI	# spill
021   	movl    RBX, [R9 + #16 (8-bit)]	# range
025   	NullCheck R9
025
025   B2: #	B23 B3 &lt;- B1  Freq: 0,999999
025   	cmpl    R8, RBX
028   	movl    R11, RBX	# spill
02b   	cmovll R11, R8	# signed, int
02f   	movl    R10, RCX	# spill
032   	addl    R10, R8	# int
035   	xorl    RAX, RAX	# int
037   	testl   R11, R11
03a   	jle     B23  P=0,037975 C=6715,000000
03a
040   B3: #	B31 B4 &lt;- B2  Freq: 0,962024
040   	movl    R8, [RDX + #16 (8-bit)]	# range
044   	NullCheck RDX
044
044   B4: #	B31 B5 &lt;- B3  Freq: 0,962023
044   	cmpl    RCX, R8	# unsigned
047   	jnb,u  B31  P=0,000001 C=-1,000000
047
04d   B5: #	B31 B6 &lt;- B4  Freq: 0,962022
04d   	movl    RDI, RCX	# spill
04f   	addl    RDI, R11	# int
052   	decl    RDI	# int
054   	cmpl    RDI, R8	# unsigned
057   	jnb,u  B31  P=0,000001 C=-1,000000
057
05d   B6: #	B31 B7 &lt;- B5  Freq: 0,962021
05d   	testl  RBX, RBX	# unsigned
05f   	jbe,u  B31  P=0,000001 C=-1,000000
05f
065   B7: #	B31 B8 &lt;- B6  Freq: 0,96202
065   	movl    R8, R11	# spill
068   	decl    R8	# int
06b   	cmpl    R8, RBX	# unsigned
06e   	jnb,u  B31  P=0,000001 C=-1,000000
06e
074   B8: #	B33 B9 &lt;- B7  Freq: 0,962019
074   	movslq  R8, RCX	# i2l
077   	movsbl  RBP, [RDX + #24 + R8]	# byte
07d   	testl   RBP, RBP
07f   	jl     B33  P=0,000000 C=6460,000000
07f
085   B9: #	B32 B10 &lt;- B8  Freq: 0,962019
085   	movw    [R9 + #24 (8-bit)], RBP	# char/short
08a   	movl    RDI, R11	# spill
08d   	addl    RDI, #-3	# int
090   	movl    RAX, #1	# int
095   	movl    RBX, #-2147483648	# int
09a   	cmpl    R11, RDI
09d   	cmovll RDI, RBX	# signed, int
0a0   	cmpl    RDI, #1
0a3   	jle     B32  P=0,000001 C=-1,000000
      	nop 	# 7 bytes pad for loops and calls

0b0   B10: #	B25 B11 &lt;- B9 B14 	Loop: B10-B14 inner main of N108 Freq: 25,3319
0b0   	movl    RBX, RAX	# spill
0b2   	addl    RBX, RCX	# int
0b4   	movslq  R8, RBX	# i2l
0b7   	movsbl  RSI, [RDX + #24 + R8]	# byte
0bd   	testl   RSI, RSI
0bf   	jl     B25  P=0,000000 C=6460,000000
0bf
0c5   B11: #	B26 B12 &lt;- B10  Freq: 25,3319
0c5   	movw    [R9 + #24 + RAX &lt;&lt; #1], RSI	# char/short
0cb   	movslq  R8, RBX	# i2l
0ce   	movsbl  RBP, [RDX + #25 + R8]	# byte
0d4   	testl   RBP, RBP
0d6   	jl     B26  P=0,000000 C=6460,000000
0d6
0dc   B12: #	B24 B13 &lt;- B11  Freq: 25,3319
0dc   	movsbl  RSI, [RDX + #26 + R8]	# byte
0e2   	movslq  R13, RAX	# i2l
0e5   	movw    [R9 + #26 + R13 &lt;&lt; #1], RBP	# char/short
0eb   	testl   RSI, RSI
0ed   	jl,s   B24  P=0,000000 C=6460,000000
0ed
0ef   B13: #	B27 B14 &lt;- B12  Freq: 25,3318
0ef   	movw    [R9 + #28 + R13 &lt;&lt; #1], RSI	# char/short
0f5   	movsbl  RBP, [RDX + #27 + R8]	# byte
0fb   	testl   RBP, RBP
0fd   	jl,s   B27  P=0,000000 C=6460,000000
0fd
0ff   B14: #	B10 B15 &lt;- B13  Freq: 25,3318
0ff   	movw    [R9 + #30 + R13 &lt;&lt; #1], RBP	# char/short
105   	addl    RAX, #4	# int
108   	cmpl    RAX, RDI
10a   	jl,s   B10	# loop end  P=0,962025 C=6460,000000
10a
10c   B15: #	B16 &lt;- B14  Freq: 0,961967
10c   	addl    RBX, #3	# int
10f
10f   B16: #	B20 B17 &lt;- B32 B15  Freq: 0,961968
10f   	cmpl    RAX, R11
112   	jge,s   B20  P=0,500000 C=-1,000000
112
114   B17: #	B18 &lt;- B16  Freq: 0,480984
114   	# castII of RAX
114
114   B18: #	B34 B19 &lt;- B17 B19 	Loop: B18-B19 inner post of N265 Freq: 0,961968
114   	movl    RBX, RAX	# spill
116   	addl    RBX, RCX	# int
118   	movslq  R8, RBX	# i2l
11b   	movsbl  RBP, [RDX + #24 + R8]	# byte
121   	testl   RBP, RBP
123   	jl     B34  P=0,000000 C=6460,000000
123
129   B19: #	B18 B20 &lt;- B18  Freq: 0,961967
129   	movw    [R9 + #24 + RAX &lt;&lt; #1], RBP	# char/short
12f   	incl    RAX	# int
131   	cmpl    RAX, R11
134   	jl,s   B18	# loop end  P=0,500000 C=6460,000000
134
136   B20: #	B21 &lt;- B19 B16  Freq: 0,961968
136   	incl    RBX	# int
138
138   B21: #	B35 B22 &lt;- B23 B20  Freq: 0,999943
138   	cmpl    RBX, R10
13b   	jl     B35  P=0,000000 C=255,000000
13b
141   B22: #	N365 &lt;- B21  Freq: 0,999942
141   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

14c   	ret
14c
14d   B23: #	B21 &lt;- B2  Freq: 0,0379746
14d   	movl    RBX, RCX	# spill
14f   	jmp,s   B21
14f
151   B24: #	B25 &lt;- B12  Freq: 1,26659e-05
151   	addl    RBX, #2	# int
154   	addl    RAX, #2	# int
157
157   B25: #	B29 &lt;- B10 B24  Freq: 2,53319e-05
157   	movl    RBP, RSI	# spill
159   	jmp,s   B29
159
15b   B26: #	B28 &lt;- B11  Freq: 1,26659e-05
15b   	incl    RBX	# int
15d   	jmp,s   B28
15d
15f   B27: #	B28 &lt;- B13  Freq: 1,26659e-05
15f   	addl    RAX, #2	# int
162   	addl    RBX, #3	# int
165
165   B28: #	B29 &lt;- B26 B27  Freq: 2,53319e-05
165   	incl    RAX	# int
167
167   B29: #	B30 &lt;- B33 B25 B28  Freq: 5,11447e-05
167   	movl    [rsp + #0], RAX	# spill
167
16a   B30: #	N365 &lt;- B34 B29  Freq: 5,16257e-05
16a   	movl    RSI, #-163	# int
16f   	movq    [rsp + #8], RDX	# spill
174   	movl    [rsp + #4], RBX	# spill
178   	movq    [rsp + #24], R9	# spill
17d   	movl    [rsp + #32], R10	# spill
182   	movl    [rsp + #36], R11	# spill
187   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # sun.nio.cs.UTF_8$Decoder::decode @ bci:30  L[0]=rsp + #16 L[1]=rsp + #8 L[2]=rsp + #4 L[3]=_ L[4]=rsp + #24 L[5]=rsp + #32 L[6]=rsp + #0 L[7]=rsp + #36 L[8]=#NULL L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=RBP
        # OopMap{[8]=Oop [16]=Oop [24]=Oop off=396}
18c   	int3	# ShouldNotReachHere
18c
191   B31: #	N365 &lt;- B7 B3 B4 B5 B6  Freq: 4,86121e-06
191   	movl    RSI, #-122	# int
196   	movq    RBP, RDX	# spill
199   	movl    [rsp + #0], RCX	# spill
19c   	movq    [rsp + #8], R9	# spill
1a1   	movl    [rsp + #4], R10	# spill
1a6   	movl    [rsp + #24], R11	# spill
1ab   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # sun.nio.cs.UTF_8$Decoder::decode @ bci:27  L[0]=rsp + #16 L[1]=RBP L[2]=rsp + #0 L[3]=_ L[4]=rsp + #8 L[5]=rsp + #4 L[6]=#0 L[7]=rsp + #24 L[8]=#NULL L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop off=432}
1b0   	int3	# ShouldNotReachHere
1b0
1b5   B32: #	B16 &lt;- B9  Freq: 9,74794e-07
1b5   	movl    RBX, RCX	# spill
1b7   	jmp     B16
1b7
1bc   B33: #	B29 &lt;- B8  Freq: 4,8101e-07
1bc   	movl    RBX, RCX	# spill
1be   	jmp,s   B29
1be
1c0   B34: #	B30 &lt;- B18  Freq: 4,80984e-07
1c0   	movl    [rsp + #0], RAX	# spill
1c3   	jmp,s   B30
1c3
1c5   B35: #	N365 &lt;- B21  Freq: 4,7681e-07
1c5   	movl    RSI, #-163	# int
1ca   	movq    RBP, RDX	# spill
1cd   	movl    [rsp + #4], RAX	# spill
1d1   	movl    [rsp + #8], RBX	# spill
1d5   	movq    [rsp + #24], R9	# spill
1da   	movl    [rsp + #32], R10	# spill
1df   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # sun.nio.cs.UTF_8$Decoder::decode @ bci:54  L[0]=rsp + #16 L[1]=RBP L[2]=rsp + #8 L[3]=_ L[4]=rsp + #24 L[5]=rsp + #32 L[6]=rsp + #4 L[7]=_ L[8]=#NULL L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=rsp + #8 STK[1]=rsp + #32
        # OopMap{rbp=Oop [16]=Oop [24]=Oop off=484}
1e4   	int3	# ShouldNotReachHere
1e4
1e9   B36: #	N365 &lt;- B1  Freq: 1,01328e-06
1e9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1ef   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.nio.cs.UTF_8$Decoder::decode @ bci:11  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=500}
1f4   	int3	# ShouldNotReachHere
1f4

</opto_assembly>
<opto_assembly compile_id='2'>
{method}
 - this oop:          0x00007fffacbb6608
 - method holder:     &apos;java/nio/DirectByteBuffer&apos;
 - constants:         0x00007fffacbb47b8 constant pool [542] {0x00007fffacbb47b8} for &apos;java/nio/DirectByteBuffer&apos; cache=0x00007fffacbbcbe0
 - access:            0x81000002  private 
 - name:              &apos;ix&apos;
 - signature:         &apos;(I)J&apos;
 - max stack:         5
 - max locals:        2
 - size of params:    2
 - method size:       12
 - vtable index:      94
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00c8548: 0xba000000 i2c: 0x00007fffed147a20 c2i: 0x00007fffed147b5a c2iUV: 0x00007fffed147b30
 - compiled entry     0x00007fffed147b5a
 - code size:         10
 - code start:        0x00007fffacbb65d8
 - code end (excl):   0x00007fffacbb65e2
 - method data:       0x00007fffacbd4298
 - checked ex length: 0
 - linenumber start:  0x00007fffacbb65e2
 - localvar length:   2
 - localvar start:    0x00007fffacbb65ee
#
#  long/half ( java/nio/DirectByteBuffer:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/nio/DirectByteBuffer:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N19: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   		cmpq    rax, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 4 bytes pad for loops and calls

010   B1: #	N19 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

01c   	movslq  RAX, RDX	# i2l
01f   	addq    RAX, [RSI + #16 (8-bit)]	# long
023   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

02e   	ret
02e

</opto_assembly>
<opto_assembly compile_id='3'>
{method}
 - this oop:          0x00007fffac9daba0
 - method holder:     &apos;java/nio/Buffer&apos;
 - constants:         0x00007fffac9d9580 constant pool [118] {0x00007fffac9d9580} for &apos;java/nio/Buffer&apos; cache=0x00007fffacacf3b8
 - access:            0x81000010  final 
 - name:              &apos;checkIndex&apos;
 - signature:         &apos;(I)I&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - intrinsic id:      68 _checkIndex
 - vtable index:      -2
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00c8548: 0xba000000 i2c: 0x00007fffed147a20 c2i: 0x00007fffed147b5a c2iUV: 0x00007fffed147b30
 - compiled entry     0x00007fffed147b5a
 - code size:         22
 - code start:        0x00007fffac9dab68
 - code end (excl):   0x00007fffac9dab7e
 - method data:       0x00007fffacbd43f8
 - checked ex length: 0
 - linenumber start:  0x00007fffac9dab7e
 - localvar length:   2
 - localvar start:    0x00007fffac9dab86
#
#  int ( java/nio/Buffer:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/nio/Buffer:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N50: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   		cmpq    rax, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 4 bytes pad for loops and calls

010   B1: #	B4 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c   	testl   RDX, RDX
01e   	jl,s   B4  P=0,000000 C=6700,000000
01e
020   B2: #	B5 B3 &lt;- B1  Freq: 1
020   	movl    RBP, [RSI + #32 (8-bit)]	# int ! Field: java/nio/Buffer.limit
023   	cmpl    RDX, RBP
025   	jge,s   B5  P=0,000000 C=6700,000000
025
027   B3: #	N50 &lt;- B2  Freq: 0,999999
027   	movl    RAX, RDX	# spill
029   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

034   	ret
034
035   B4: #	N50 &lt;- B1  Freq: 5e-07
035   	movq    RBP, RSI	# spill
038   	movl    [rsp + #4], RDX	# spill
03c   	movl    RSI, #-163	# int
      	nop 	# 2 bytes pad for loops and calls
043   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.nio.Buffer::checkIndex @ bci:1  L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # OopMap{rbp=Oop off=72}
048   	int3	# ShouldNotReachHere
048
04d   B5: #	N50 &lt;- B2  Freq: 4,76837e-07
04d   	movl    RSI, #-163	# int
052   	movl    [rsp + #4], RDX	# spill
      	nop 	# 1 bytes pad for loops and calls
057   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.nio.Buffer::checkIndex @ bci:9  L[0]=_ L[1]=rsp + #4 STK[0]=rsp + #4 STK[1]=RBP
        # OopMap{off=92}
05c   	int3	# ShouldNotReachHere
05c

</opto_assembly>
<opto_assembly compile_id='5'>
{method}
 - this oop:          0x00007fffacbb6780
 - method holder:     &apos;java/nio/DirectByteBuffer&apos;
 - constants:         0x00007fffacbb47b8 constant pool [542] {0x00007fffacbb47b8} for &apos;java/nio/DirectByteBuffer&apos; cache=0x00007fffacbbcbe0
 - access:            0x81000001  public 
 - name:              &apos;get&apos;
 - signature:         &apos;(I)B&apos;
 - max stack:         5
 - max locals:        2
 - size of params:    2
 - method size:       12
 - vtable index:      17
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00c8548: 0xba000000 i2c: 0x00007fffed147a20 c2i: 0x00007fffed147b5a c2iUV: 0x00007fffed147b30
 - compiled entry     0x00007fffed147b5a
 - code size:         16
 - code start:        0x00007fffacbb6750
 - code end (excl):   0x00007fffacbb6760
 - method data:       0x00007fffacbd45a8
 - checked ex length: 0
 - linenumber start:  0x00007fffacbb6760
 - localvar length:   2
 - localvar start:    0x00007fffacbb6766
#
#  byte ( java/nio/DirectByteBuffer:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/nio/DirectByteBuffer:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N56: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   		cmpq    rax, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 4 bytes pad for loops and calls

010   B1: #	B4 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (232 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c   	testl   RDX, RDX
01e   	jl,s   B4  P=0,000000 C=6701,000000
01e
020   B2: #	B5 B3 &lt;- B1  Freq: 1
020   	movl    RBP, [RSI + #32 (8-bit)]	# int ! Field: java/nio/Buffer.limit
023   	cmpl    RDX, RBP
025   	jge,s   B5  P=0,000000 C=6701,000000
025
027   B3: #	N56 &lt;- B2  Freq: 0,999999
027   	movq    R10, [RSI + #16 (8-bit)]	# long ! Field: java/nio/Buffer.address
02b   	movslq  R11, RDX	# i2l
02e   	movq    R10, R10	# long-&gt;ptr
02e   	movsbl  RAX, [R10 + R11]	# byte
033   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

03e   	ret
03e
03f   B4: #	N56 &lt;- B1  Freq: 5e-07
03f   	movq    [rsp + #0], RSI	# spill
043   	movl    [rsp + #12], RDX	# spill
047   	movl    RSI, #-163	# int
      	nop 	# 3 bytes pad for loops and calls
04f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.nio.Buffer::checkIndex @ bci:1  L[0]=rsp + #0 L[1]=rsp + #12 STK[0]=rsp + #12
        # java.nio.DirectByteBuffer::get @ bci:6  L[0]=_ L[1]=_ STK[0]=#Ptr0x00007fff88050020 STK[1]=rsp + #0
        # OopMap{[0]=Oop off=84}
054   	int3	# ShouldNotReachHere
054
059   B5: #	N56 &lt;- B2  Freq: 4,76837e-07
059   	movq    [rsp + #0], RSI	# spill
05d   	movl    [rsp + #12], RDX	# spill
061   	movl    RSI, #-163	# int
      	nop 	# 1 bytes pad for loops and calls
067   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.nio.Buffer::checkIndex @ bci:9  L[0]=_ L[1]=rsp + #12 STK[0]=rsp + #12 STK[1]=RBP
        # java.nio.DirectByteBuffer::get @ bci:6  L[0]=_ L[1]=_ STK[0]=#Ptr0x00007fff88050020 STK[1]=rsp + #0
        # OopMap{[0]=Oop off=108}
06c   	int3	# ShouldNotReachHere
06c

</opto_assembly>
<opto_assembly compile_id='6'>
{method}
 - this oop:          0x00007fffac9d9c60
 - method holder:     &apos;java/nio/Buffer&apos;
 - constants:         0x00007fffac9d9580 constant pool [118] {0x00007fffac9d9580} for &apos;java/nio/Buffer&apos; cache=0x00007fffacacf3b8
 - access:            0x81000011  public final 
 - name:              &apos;capacity&apos;
 - signature:         &apos;()I&apos;
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       12
 - vtable index:      -2
 - i2i entry:         0x00007fffed01c6e0
 - adapters:          AHE@0x00007ffff00c8398: 0xb0000000 i2c: 0x00007fffed1461a0 c2i: 0x00007fffed1462d7 c2iUV: 0x00007fffed1462ad
 - compiled entry     0x00007fffed1462d7
 - code size:         5
 - code start:        0x00007fffac9d9c48
 - code end (excl):   0x00007fffac9d9c4d
 - method data:       0x00007fffacbd47a0
 - checked ex length: 0
 - linenumber start:  0x00007fffac9d9c4d
 - localvar length:   1
 - localvar start:    0x00007fffac9d9c52
#
#  int ( java/nio/Buffer:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/nio/Buffer:NotNull *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N16: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   		cmpq    rax, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 4 bytes pad for loops and calls

010   B1: #	N16 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

01c   	movl    RAX, [RSI + #36 (8-bit)]	# int ! Field: java/nio/Buffer.capacity
01f   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

02a   	ret
02a

</opto_assembly>
<opto_assembly compile_id='7'>
{method}
 - this oop:          0x00007fffacbc6de0
 - method holder:     &apos;jdk/internal/jimage/ImageStrings&apos;
 - constants:         0x00007fffacbc62b8 constant pool [150] {0x00007fffacbc62b8} for &apos;jdk/internal/jimage/ImageStrings&apos; cache=0x00007fffacbc7320
 - access:            0xc1000000  
 - name:              &apos;get&apos;
 - signature:         &apos;(I)Ljdk/internal/jimage/UTF8String;&apos;
 - max stack:         6
 - max locals:        7
 - size of params:    2
 - method size:       12
 - vtable index:      9
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00c8548: 0xba000000 i2c: 0x00007fffed147a20 c2i: 0x00007fffed147b5a c2iUV: 0x00007fffed147b30
 - compiled entry     0x00007fffed147b5a
 - code size:         141
 - code start:        0x00007fffacbc6cd8
 - code end (excl):   0x00007fffacbc6d65
 - method data:       0x00007fffacbd48f8
 - checked ex length: 0
 - linenumber start:  0x00007fffacbc6d65
 - localvar length:   8
 - localvar start:    0x00007fffacbc6d7e
#
#  jdk/internal/jimage/UTF8String:exact * ( jdk/internal/jimage/ImageStrings:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: jdk/internal/jimage/ImageStrings:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N620: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   		cmpq    rax, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 4 bytes pad for loops and calls

010   B1: #	B48 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (448 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

01c   	movl    [rsp + #8], RDX	# spill
020   	movq    R10, [RSI + #24 (8-bit)]	# ptr ! Field: jdk/internal/jimage/ImageStrings.stream
024   	movq    R8, [R10 + #16 (8-bit)]	# ptr ! Field: jdk/internal/jimage/ImageStream.buffer
028   	NullCheck R10
028
028   B2: #	B49 B3 &lt;- B1  Freq: 0,999999
028   	movl    RBP, [R8 + #36 (8-bit)]	# int ! Field: java/nio/Buffer.capacity
02c   	NullCheck R8
02c
02c   B3: #	B46 B4 &lt;- B2  Freq: 0,999998
02c   	cmpl    RDX, RBP
02e   	jge     B46  P=0,000000 C=6701,000000
02e
034   B4: #	B41 B5 &lt;- B3  Freq: 0,999997
034   	movq    R10, [R8 + #8 (8-bit)]	# class
038   	movq    R11, precise klass java/nio/DirectByteBufferR: 0x00007fff8804eba0:Constant:exact *	# ptr
042   	cmpq    R10, R11	# ptr
045   	jne,u  B41  P=0,000001 C=-1,000000
045
04b   B5: #	B6 &lt;- B4  Freq: 0,999996
04b   	# checkcastPP of R8
04b   	movq    [rsp + #16], R8	# spill
050   	movl    RCX, [R8 + #32 (8-bit)]	# int ! Field: java/nio/Buffer.limit
054   	movl    RBP, [R8 + #36 (8-bit)]	# int ! Field: java/nio/Buffer.capacity
058   	movq    R10, [R8 + #16 (8-bit)]	# long ! Field: java/nio/Buffer.address
05c   	movl    R8, RDX	# spill
05f   	incl    R8	# int
062   	movq    R9, R10	# long-&gt;ptr
065   	movl    R11, #-2147483647	# int
06b   	xorl    RBX, RBX	# int
06d   	xorl    RDI, RDI	# int
06f   	cmpl    R8, RBX
072   	cmovllt R8, RDI	# max
076   	cmpl    R8, R11
079   	cmovllt R8, R11	# max
07d   	cmpl    R8, RBP
080   	cmovlgt R8, RBP	# min
084   	movl    R11, RDX	# spill
084
087   B6: #	B42 B7 &lt;- B5 B10 	Loop: B6-B10 inner pre of N614 Freq: 1,92695
087   	testl   R11, R11
08a   	jl     B42  P=0,000000 C=6701,000000
08a
090   B7: #	B44 B8 &lt;- B6  Freq: 1,92695
090   	cmpl    R11, RCX
093   	jge     B44  P=0,000000 C=6701,000000
093
099   B8: #	B21 B9 &lt;- B7  Freq: 1,92695
099   	movslq  R10, R11	# i2l
09c   	movsbl  R10, [R9 + R10]	# byte
0a1   	testl   R10, R10
0a4   	je     B21  P=0,037905 C=6701,000000
0a4
0aa   B9: #	B11 B10 &lt;- B8  Freq: 1,85391
0aa   	movl    RDI, R11	# spill
0ad   	incl    RDI	# int
0af   	cmpl    RDI, R8
0b2   	jge,s   B11	# loop end  P=0,500000 C=6447,000000
0b2
0b4   B10: #	B6 &lt;- B9  Freq: 0,926954
0b4   	movl    R11, RDI	# spill
0b7   	jmp,s   B6
0b7
0b9   B11: #	B18 B12 &lt;- B9  Freq: 0,926954
0b9   	cmpl    RCX, RBP
0bb   	movl    R8, RCX	# spill
0be   	cmovlgt R8, RBP	# min
0c2   	movl    R10, R8	# spill
0c5   	addl    R10, #-3	# int
0c9   	movl    RBX, #-2147483648	# int
0ce   	cmpl    R8, R10
0d1   	cmovll R10, RBX	# signed, int
0d5   	cmpl    RDI, R10
0d8   	jge,s   B18  P=0,000001 C=-1,000000
0d8
0da   B12: #	B13 &lt;- B11  Freq: 0,926953
0da   	# castII of RDI
      	nop 	# 6 bytes pad for loops and calls

0e0   B13: #	B20 B14 &lt;- B12 B17 	Loop: B13-B17 inner main of N189 Freq: 6,47247
0e0   	movslq  R11, RDI	# i2l
0e3   	movsbl  R8, [R9 + R11]	# byte
0e8   	testl   R8, R8
0eb   	je,s   B20  P=0,037905 C=6701,000000
0eb
0ed   B14: #	B21 B15 &lt;- B13  Freq: 6,22713
0ed   	movl    R11, RDI	# spill
0f0   	incl    R11	# int
0f3   	movslq  R8, R11	# i2l
0f6   	movsbl  R8, [R9 + R8]	# byte
0fb   	testl   R8, R8
0fe   	je,s   B21  P=0,037905 C=6701,000000
0fe
100   B15: #	B21 B16 &lt;- B14  Freq: 5,99109
100   	movl    R11, RDI	# spill
103   	addl    R11, #2	# int
107   	movslq  R8, R11	# i2l
10a   	movsbl  RBX, [R9 + R8]	# byte
10f   	testl   RBX, RBX
111   	je,s   B21  P=0,037905 C=6701,000000
111
113   B16: #	B21 B17 &lt;- B15  Freq: 5,764
113   	movl    R11, RDI	# spill
116   	addl    R11, #3	# int
11a   	movslq  R8, R11	# i2l
11d   	movsbl  R8, [R9 + R8]	# byte
122   	testl   R8, R8
125   	je,s   B21  P=0,037905 C=6701,000000
125
127   B17: #	B13 B18 &lt;- B16  Freq: 5,54552
127   	addl    RDI, #4	# int
12a   	cmpl    RDI, R10
12d   	jl,s   B13	# loop end  P=1,000000 C=6447,000000
12d
12f   B18: #	B47 B19 &lt;- B11 B17  Freq: 3,58357e-06
12f   	cmpl    RDI, RBP
131   	jge     B47  P=0,000001 C=-1,000000
131
137   B19: #	B35 &lt;- B18  Freq: 3,58357e-06
137   	# castII of RDI
137   	jmp     B35
137
13c   B20: #	B21 &lt;- B13  Freq: 0,245338
13c   	movl    R11, RDI	# spill
13c
13f   B21: #	B30 B22 &lt;- B40 B8 B20 B15 B14 B16  Freq: 0,999995
13f   	subl    R11, [RSP + #8 (32-bit)]	# int
144   	movl    [rsp + #0], R11	# spill
148   	cmpl    R11, #1048576	# unsigned
14f   	jnbe,u  B30  P=0,000001 C=-1,000000
14f
155   B22: #	B30 B23 &lt;- B21  Freq: 0,999994
155   	# TLS is in R15
155   	movq    R8, [R15 + #112 (8-bit)]	# ptr
159   	movslq  RCX, R11	# i2l
15c   	addq    RCX, #31	# long
160   	movq    R10, RCX	# spill
163   	andq    R10, #-8	# long
167   	movq    R11, R8	# spill
16a   	addq    R11, R10	# ptr
16d   	# TLS is in R15
16d   	cmpq    R11, [R15 + #128 (32-bit)]	# raw ptr
174   	jnb,u  B30  P=0,000100 C=-1,000000
174
17a   B23: #	B24 &lt;- B22  Freq: 0,999894
17a   	# TLS is in R15
17a   	movq    [R15 + #112 (8-bit)], R11	# ptr
17e   	PREFETCHNTA [R11 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
186   	movq    [R8], 0x0000000000000001	# ptr
18d   	PREFETCHNTA [R11 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
195   	movq    RDI, R8	# spill
198   	addq    RDI, #24	# ptr
19c   	PREFETCHNTA [R11 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
1a4   	shrq    RCX, #3
1a8   	addq    RCX, #-3	# long
1ac   	movq    R10, precise klass [B: 0x00007ffff01428e0:Constant:exact *	# ptr
1b6   	movq    [R8 + #8 (8-bit)], R10	# ptr
1ba   	movl    R11, [rsp + #0]	# spill
1be   	movl    [R8 + #16 (8-bit)], R11	# int
1c2   	xorq    rax, rax	# ClearArray:
	rep     stosq	# Store rax to *rdi++ while rcx--
1c8
1c8   B24: #	B52 B25 &lt;- B31 B23  Freq: 0,999995
1c8   	
1c8   	MEMBAR-storestore (empty encoding)
1c8   	# checkcastPP of R8
1c8   	movq    [rsp + #24], R8	# spill
1cd   	movq    R10, [rsp + #16]	# spill
1d2   	movl    RBP, [R10 + #28 (8-bit)]	# int ! Field: java/nio/Buffer.position
1d6   	movq    RSI, R10	# spill
1d9   	movl    RDX, [rsp + #8]	# spill
1dd   	movq    [rsp + #8], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
1e3   	call,static  java.nio.Buffer::position
        # java.nio.ByteBuffer::position @ bci:2  L[0]=rsp + #8 L[1]=_
        # java.nio.MappedByteBuffer::position @ bci:2  L[0]=rsp + #16 L[1]=_
        # java.nio.MappedByteBuffer::position @ bci:2  L[0]=_ L[1]=_
        # jdk.internal.jimage.ImageStrings::get @ bci:110  L[0]=_ L[1]=_ L[2]=rsp + #8 L[3]=_ L[4]=rsp + #0 L[5]=rsp + #24 L[6]=RBP
        # OopMap{[8]=Oop [16]=Oop [24]=Oop off=488}
1e8
1e8   B25: #	B53 B26 &lt;- B24  Freq: 0,999975
        # Block is sole successor of call
1e8   	movq    RSI, [rsp + #8]	# spill
1ed   	movq    RDX, [rsp + #24]	# spill
1f2   	xorl    RCX, RCX	# int
1f4   	movl    R8, [rsp + #0]	# spill
      	nop 	# 3 bytes pad for loops and calls
1fb   	call,static  java.nio.DirectByteBuffer::get
        # java.nio.ByteBuffer::get @ bci:5  L[0]=_ L[1]=_
        # jdk.internal.jimage.ImageStrings::get @ bci:117  L[0]=_ L[1]=_ L[2]=rsp + #8 L[3]=_ L[4]=rsp + #0 L[5]=rsp + #24 L[6]=RBP
        # OopMap{[8]=Oop [24]=Oop off=512}
200
200   B26: #	B54 B27 &lt;- B25  Freq: 0,999955
        # Block is sole successor of call
200   	movq    RSI, [rsp + #8]	# spill
205   	movl    RDX, RBP	# spill
207   	movq    RBP, RSI	# spill
      	nop 	# 1 bytes pad for loops and calls
20b   	call,static  java.nio.Buffer::position
        # java.nio.ByteBuffer::position @ bci:2  L[0]=RBP L[1]=_
        # java.nio.MappedByteBuffer::position @ bci:2  L[0]=RBP L[1]=_
        # java.nio.MappedByteBuffer::position @ bci:2  L[0]=_ L[1]=_
        # jdk.internal.jimage.ImageStrings::get @ bci:124  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=rsp + #0 L[5]=rsp + #24 L[6]=_
        # OopMap{rbp=Oop [24]=Oop off=528}
210
210   B27: #	B32 B28 &lt;- B26  Freq: 0,999935
        # Block is sole successor of call
210   	# TLS is in R15
210   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
214   	movq    R10, RAX	# spill
217   	addq    R10, #40	# ptr
21b   	# TLS is in R15
21b   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
222   	jnb,u  B32  P=0,000100 C=-1,000000
222
228   B28: #	B29 &lt;- B27  Freq: 0,999835
228   	# TLS is in R15
228   	movq    [R15 + #112 (8-bit)], R10	# ptr
22c   	PREFETCHNTA [R10 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
234   	movq    R10, precise klass jdk/internal/jimage/UTF8String: 0x00007fff8804e550:Constant:exact *	# ptr
23e   	movq    R11, [R10 + #176 (32-bit)]	# ptr
245   	movq    [RAX], R11	# ptr
248   	movq    [RAX + #8 (8-bit)], R10	# ptr
24c   	movq    [RAX + #16 (8-bit)], #0	# long
254   	movq    [RAX + #32 (8-bit)], #0	# long
254
25c   B29: #	N620 &lt;- B33 B28  Freq: 0,999935
25c   	movl    R10, #4294967295	# long (unsigned 32-bit)
262   	movq    [RAX + #24 (8-bit)], R10	# long
266   	
266   	MEMBAR-storestore (empty encoding)
266   	# checkcastPP of RAX
266   	movl    R10, [rsp + #0]	# spill
26a   	movl    [RAX + #20 (8-bit)], R10	# int ! Field: jdk/internal/jimage/UTF8String.count
26e   	movq    R10, [rsp + #24]	# spill
273   	movq    [RAX + #32 (8-bit)], R10	# ptr ! Field: jdk/internal/jimage/UTF8String.bytes
277   	movq    R10, RAX	# ptr -&gt; long
27a   	shrq    R10, #9
27e   	movq    R11, 0x00007fbff48dc000	# ptr
288   	movb    [R11 + R10], #0	# byte
28d   	MEMBAR-release ! (empty encoding)
28d   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

298   	ret
298
299   B30: #	B51 B31 &lt;- B21 B22  Freq: 0,000101029
299   	movq    RSI, precise klass [B: 0x00007ffff01428e0:Constant:exact *	# ptr
2a3   	movl    RDX, [rsp + #0]	# spill
2a6   	movl    RBP, [rsp + #8]	# spill
      	nop 	# 1 bytes pad for loops and calls
2ab   	call,static  wrapper for: _new_array_Java
        # jdk.internal.jimage.ImageStrings::get @ bci:98  L[0]=_ L[1]=RBP L[2]=rsp + #16 L[3]=_ L[4]=rsp + #0 L[5]=_ L[6]=_
        # OopMap{[16]=Oop off=688}
2b0
2b0   B31: #	B24 &lt;- B30  Freq: 0,000101027
        # Block is sole successor of call
2b0   	movq    R8, RAX	# spill
2b3   	jmp     B24
2b3
2b8   B32: #	B50 B33 &lt;- B27  Freq: 0,00010001
2b8   	movq    RSI, precise klass jdk/internal/jimage/UTF8String: 0x00007fff8804e550:Constant:exact *	# ptr
2c2   	movl    RBP, [rsp + #0]	# spill
      	nop 	# 2 bytes pad for loops and calls
2c7   	call,static  wrapper for: _new_instance_Java
        # jdk.internal.jimage.ImageStrings::get @ bci:128  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=RBP L[5]=rsp + #24 L[6]=_
        # OopMap{[24]=Oop off=716}
2cc
2cc   B33: #	B29 &lt;- B32  Freq: 0,000100008
        # Block is sole successor of call
2cc   	jmp,s   B29
      	nop 	# 2 bytes pad for loops and calls

2d0   B34: #	B35 &lt;- B38  top-of-loop Freq: 9,0953e-05
2d0   	movl    RDI, R11	# spill
2d0
2d3   B35: #	B43 B36 &lt;- B19 B34 	Loop: B35-B34 inner post of N614 Freq: 9,45365e-05
2d3   	testl   RDI, RDI
2d5   	jl,s   B43  P=0,000000 C=6701,000000
2d5
2d7   B36: #	B45 B37 &lt;- B35  Freq: 9,45365e-05
2d7   	cmpl    RDI, RCX
2d9   	jge,s   B45  P=0,000000 C=6701,000000
2d9
2db   B37: #	B40 B38 &lt;- B36  Freq: 9,45364e-05
2db   	movslq  R10, RDI	# i2l
2de   	movsbl  R11, [R9 + R10]	# byte
2e3   	testl   R11, R11
2e6   	je,s   B40  P=0,037905 C=6701,000000
2e6
2e8   B38: #	B34 B39 &lt;- B37  Freq: 9,0953e-05
2e8   	movl    R11, RDI	# spill
2eb   	incl    R11	# int
2ee   	cmpl    R11, RBP
2f1   	jl,s   B34	# loop end  P=0,999999 C=6447,000000
2f1
2f3   B39: #	N620 &lt;- B38 B47  Freq: 9,5792e-11
2f3   	incl    RDI	# int
2f5   	movl    RSI, #-163	# int
2fa   	movl    [rsp + #4], RDI	# spill
      	nop 	# 1 bytes pad for loops and calls
2ff   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # jdk.internal.jimage.ImageStrings::get @ bci:48  L[0]=_ L[1]=rsp + #8 L[2]=rsp + #16 L[3]=#-1 L[4]=rsp + #4 L[5]=_ L[6]=_ STK[0]=rsp + #4 STK[1]=RBP
        # OopMap{[16]=Oop off=772}
304   	int3	# ShouldNotReachHere
304
309   B40: #	B21 &lt;- B37  Freq: 3,58338e-06
309   	movl    R11, RDI	# spill
30c   	jmp     B21
30c
311   B41: #	N620 &lt;- B4  Freq: 9,99997e-07
311   	movl    RSI, #-122	# int
316   	movl    RBP, RDX	# spill
318   	movq    [rsp + #0], R8	# spill
      	nop 	# 3 bytes pad for loops and calls
31f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # jdk.internal.jimage.ImageStrings::get @ bci:51  L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=#-1 L[4]=RBP L[5]=_ L[6]=_
        # OopMap{[0]=Oop off=804}
324   	int3	# ShouldNotReachHere
324
329   B42: #	B43 &lt;- B6  Freq: 9,63475e-07
329   	movl    RDI, R11	# spill
329
32c   B43: #	N620 &lt;- B35 B42  Freq: 9,63522e-07
32c   	movl    RSI, #-163	# int
331   	movl    [rsp + #0], RDI	# spill
334   	movl    [rsp + #4], RDI	# spill
      	nop 	# 3 bytes pad for loops and calls
33b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.nio.Buffer::checkIndex @ bci:1  L[0]=rsp + #16 L[1]=rsp + #4 STK[0]=rsp + #0
        # java.nio.DirectByteBuffer::get @ bci:6  L[0]=_ L[1]=_ STK[0]=#Ptr0x00007fff880ba3d0 STK[1]=rsp + #16
        # jdk.internal.jimage.ImageStrings::get @ bci:54  L[0]=_ L[1]=rsp + #8 L[2]=rsp + #16 L[3]=#-1 L[4]=rsp + #0 L[5]=_ L[6]=_
        # OopMap{[16]=Oop off=832}
340   	int3	# ShouldNotReachHere
340
345   B44: #	B45 &lt;- B7  Freq: 9,18841e-07
345   	movl    RDI, R11	# spill
345
348   B45: #	N620 &lt;- B36 B44  Freq: 9,18886e-07
348   	movl    RSI, #-163	# int
34d   	movl    [rsp + #0], RDI	# spill
350   	movl    [rsp + #4], RDI	# spill
354   	movl    [rsp + #12], RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
35b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.nio.Buffer::checkIndex @ bci:9  L[0]=_ L[1]=rsp + #4 STK[0]=rsp + #0 STK[1]=rsp + #12
        # java.nio.DirectByteBuffer::get @ bci:6  L[0]=_ L[1]=_ STK[0]=#Ptr0x00007fff880ba3d0 STK[1]=rsp + #16
        # jdk.internal.jimage.ImageStrings::get @ bci:54  L[0]=_ L[1]=rsp + #8 L[2]=rsp + #16 L[3]=#-1 L[4]=rsp + #0 L[5]=_ L[6]=_
        # OopMap{[16]=Oop off=864}
360   	int3	# ShouldNotReachHere
360
365   B46: #	N620 &lt;- B3  Freq: 4,76836e-07
365   	movl    RSI, #-163	# int
36a   	movq    [rsp + #16], R8	# spill
36f   	movl    [rsp + #4], RDX	# spill
373   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # jdk.internal.jimage.ImageStrings::get @ bci:48  L[0]=_ L[1]=rsp + #4 L[2]=rsp + #16 L[3]=#-1 L[4]=rsp + #8 L[5]=_ L[6]=_ STK[0]=rsp + #4 STK[1]=RBP
        # OopMap{[16]=Oop off=888}
378   	int3	# ShouldNotReachHere
378
37d   B47: #	B39 &lt;- B18  Freq: 3,63116e-12
37d   	movl    RDI, R11	# spill
380   	jmp     B39
380
385   B48: #	N620 &lt;- B1  Freq: 1,01328e-06
385   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
38b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # jdk.internal.jimage.ImageStrings::get @ bci:4  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap{off=912}
390   	int3	# ShouldNotReachHere
390
395   B49: #	N620 &lt;- B2  Freq: 1,01328e-06
395   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
39b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # jdk.internal.jimage.ImageStrings::get @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=928}
3a0   	int3	# ShouldNotReachHere
3a0
3a5   B50: #	B55 &lt;- B32  Freq: 1,0001e-09
3a5   	# exception oop is in rax; no code emitted
3a5   	movq    RSI, RAX	# spill
3a8   	jmp,s   B55
3a8
3aa   B51: #	B55 &lt;- B30  Freq: 1,01029e-09
3aa   	# exception oop is in rax; no code emitted
3aa   	movq    RSI, RAX	# spill
3ad   	jmp,s   B55
3ad
3af   B52: #	B55 &lt;- B24  Freq: 9,99995e-06
3af   	# exception oop is in rax; no code emitted
3af   	movq    RSI, RAX	# spill
3b2   	jmp,s   B55
3b2
3b4   B53: #	B55 &lt;- B25  Freq: 9,99975e-06
3b4   	# exception oop is in rax; no code emitted
3b4   	movq    RSI, RAX	# spill
3b7   	jmp,s   B55
3b7
3b9   B54: #	B55 &lt;- B26  Freq: 9,99955e-06
3b9   	# exception oop is in rax; no code emitted
3b9   	movq    RSI, RAX	# spill
3b9
3bc   B55: #	N620 &lt;- B51 B52 B53 B54 B50  Freq: 3,00012e-05
3bc   	addq    rsp, 64	# Destroy frame
	popq   rbp

3c1   	jmp     rethrow_stub
3c1

</opto_assembly>
<opto_assembly compile_id='8'>
{method}
 - this oop:          0x00007fffac928698
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007fffac9231d0 constant pool [676] {0x00007fffac9231d0} for &apos;java/lang/String&apos; cache=0x00007fffac9fa6e8
 - access:            0xc1000001  public 
 - name:              &apos;hashCode&apos;
 - signature:         &apos;()I&apos;
 - max stack:         3
 - max locals:        6
 - size of params:    1
 - method size:       12
 - vtable index:      3
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00c8398: 0xb0000000 i2c: 0x00007fffed1461a0 c2i: 0x00007fffed1462d7 c2iUV: 0x00007fffed1462ad
 - compiled entry     0x00007fffed1462d7
 - code size:         53
 - code start:        0x00007fffac928630
 - code end (excl):   0x00007fffac928665
 - method data:       0x00007fffacb7a4c8
 - checked ex length: 0
 - linenumber start:  0x00007fffac928665
 - localvar length:   3
 - localvar start:    0x00007fffac928672
#
#  int ( java/lang/String:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N198: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   		cmpq    rax, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 4 bytes pad for loops and calls

010   B1: #	B16 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (152 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c   	movq    RDI, RSI	# spill
01f   	movl    RAX, [RSI + #24 (8-bit)]	# int ! Field: java/lang/String.hash
022   	testl   RAX, RAX
024   	jne     B16  P=0,027344 C=256,000000
024
02a   B2: #	B19 B3 &lt;- B1  Freq: 0,972656
02a   	movq    RDX, [RSI + #16 (8-bit)]	# ptr ! Field: java/lang/String.value
02e   	movl    RBP, [RDX + #16 (8-bit)]	# range
031   	NullCheck RDX
031
031   B3: #	B17 B4 &lt;- B2  Freq: 0,972655
031   	testl   RBP, RBP
033   	jle     B17  P=0,037213 C=6718,000000
033
039   B4: #	B18 B5 &lt;- B3  Freq: 0,936459
039   	testl  RBP, RBP	# unsigned
03b   	jbe,u  B18  P=0,000001 C=-1,000000
03b
041   B5: #	B18 B6 &lt;- B4  Freq: 0,936458
041   	movl    R9, RBP	# spill
044   	decl    R9	# int
047   	cmpl    R9, RBP	# unsigned
04a   	jnb,u  B18  P=0,000001 C=-1,000000
04a
050   B6: #	B13 B7 &lt;- B5  Freq: 0,936458
050   	movzwl  RBX, [RDX + #24 (8-bit)]	# ushort/char
054   	movl    R10, RBP	# spill
057   	addl    R10, #-3	# int
05b   	movl    R8, #1	# int
061   	movl    RCX, #-2147483648	# int
066   	cmpl    R9, R10
069   	cmovll R10, RCX	# signed, int
06d   	cmpl    R10, #1
071   	jle,s   B13  P=0,000001 C=-1,000000
071
073   B7: #	B12 &lt;- B6  Freq: 0,936457
073   	movl    RSI, RBX	# spill
075   	sall    RSI, #5
078   	jmp,s   B12
078
07a   B8: #	B9 &lt;- B13  Freq: 0,468229
07a   	# castII of R8
07a
07a   B9: #	B15 B10 &lt;- B8 B10 	Loop: B9-B10 inner post of N159 Freq: 0,936458
07a   	movzwl  R11, [RDX + #24 + R8 &lt;&lt; #1]	# ushort/char
080   	movl    RAX, RBX	# spill
082   	sall    RAX, #5
085   	subl    RAX, RBX	# int
087   	addl    RAX, R11	# int
08a   	incl    R8	# int
08d   	cmpl    R8, RBP
090   	jge,s   B15	# loop end  P=0,500000 C=6468,000000
090
092   B10: #	B9 &lt;- B9  Freq: 0,468229
092   	movl    RBX, RAX	# spill
094   	jmp,s   B9
      	nop 	# 10 bytes pad for loops and calls

0a0   B11: #	B12 &lt;- B12  top-of-loop Freq: 24,228
0a0   	movl    RSI, RBX	# spill
0a2   	sall    RSI, #5
0a5
0a5   B12: #	B11 B13 &lt;- B7 B11 	Loop: B12-B11 inner main of N69 Freq: 25,1645
0a5   	movzwl  R9, [RDX + #24 + R8 &lt;&lt; #1]	# ushort/char
0ab   	subl    RSI, RBX	# int
0ad   	addl    RSI, R9	# int
0b0   	movslq  R11, R8	# i2l
0b3   	movzwl  RBX, [RDX + #26 + R11 &lt;&lt; #1]	# ushort/char
0b9   	movzwl  R9, [RDX + #30 + R11 &lt;&lt; #1]	# ushort/char
0bf   	movzwl  R11, [RDX + #28 + R11 &lt;&lt; #1]	# ushort/char
0c5   	movl    RCX, RSI	# spill
0c7   	sall    RCX, #5
0ca   	subl    RCX, RSI	# int
0cc   	addl    RCX, RBX	# int
0ce   	movl    RSI, RCX	# spill
0d0   	sall    RSI, #5
0d3   	subl    RSI, RCX	# int
0d5   	addl    RSI, R11	# int
0d8   	movl    RBX, RSI	# spill
0da   	sall    RBX, #5
0dd   	subl    RBX, RSI	# int
0df   	addl    RBX, R9	# int
0e2   	addl    R8, #4	# int
0e6   	cmpl    R8, R10
0e9   	jl,s   B11	# loop end  P=0,962787 C=6468,000000
0e9
0eb   B13: #	B8 B14 &lt;- B6 B12  Freq: 0,936458
0eb   	cmpl    R8, RBP
0ee   	jl,s   B8  P=0,500000 C=-1,000000
0ee
0f0   B14: #	B15 &lt;- B13  Freq: 0,468229
0f0   	movl    RAX, RBX	# spill
0f0
0f2   B15: #	B16 &lt;- B9 B14 B17  Freq: 0,972653
0f2   	movl    [RDI + #24 (8-bit)], RAX	# int ! Field: java/lang/String.hash
0f2
0f5   B16: #	N198 &lt;- B15 B1  Freq: 0,999997
0f5   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

100   	ret
100
101   B17: #	B15 &lt;- B3  Freq: 0,0361959
101   	xorl    RAX, RAX	# int
103   	jmp,s   B15
103
105   B18: #	N198 &lt;- B5 B4  Freq: 1,88535e-06
105   	movl    RSI, #-122	# int
10a   	movq    [rsp + #0], RDI	# spill
10e   	movq    [rsp + #8], RDX	# spill
113   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::hashCode @ bci:26  L[0]=rsp + #0 L[1]=#0 L[2]=rsp + #8 L[3]=RBP L[4]=#0 L[5]=_
        # OopMap{[0]=Oop [8]=Oop off=280}
118   	int3	# ShouldNotReachHere
118
11d   B19: #	N198 &lt;- B2  Freq: 9,85572e-07
11d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
123   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::hashCode @ bci:15  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # OopMap{off=296}
128   	int3	# ShouldNotReachHere
128

</opto_assembly>
<opto_assembly compile_id='9'>
{method}
 - this oop:          0x00007fffac926e70
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00007fffac9231d0 constant pool [676] {0x00007fffac9231d0} for &apos;java/lang/String&apos; cache=0x00007fffac9fa6e8
 - access:            0x81000001  public 
 - name:              &apos;charAt&apos;
 - signature:         &apos;(I)C&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       12
 - vtable index:      -2
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00c8548: 0xba000000 i2c: 0x00007fffed147a20 c2i: 0x00007fffed147b5a c2iUV: 0x00007fffed147b30
 - compiled entry     0x00007fffed147b5a
 - code size:         29
 - code start:        0x00007fffac926e30
 - code end (excl):   0x00007fffac926e4d
 - method data:       0x00007fffacc1cbc8
 - checked ex length: 0
 - linenumber start:  0x00007fffac926e4d
 - localvar length:   2
 - localvar start:    0x00007fffac926e56
#
#  char ( java/lang/String:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N79: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   		cmpq    rax, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 4 bytes pad for loops and calls

010   B1: #	B7 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c   	testl   RDX, RDX
01e   	jl,s   B7  P=0,000000 C=6700,000000
01e
020   B2: #	B9 B3 &lt;- B1  Freq: 1
020   	movq    R10, [RSI + #16 (8-bit)]	# ptr ! Field: java/lang/String.value
024   	movl    RBP, [R10 + #16 (8-bit)]	# range
028   	NullCheck R10
028
028   B3: #	B8 B4 &lt;- B2  Freq: 0,999999
028   	cmpl    RDX, RBP
02a   	jge,s   B8  P=0,000000 C=6700,000000
02a
02c   B4: #	B6 B5 &lt;- B3  Freq: 0,999998
02c   	cmpl    RDX, RBP	# unsigned
02e   	jnb,us  B6  P=0,000001 C=-1,000000
02e
030   B5: #	N79 &lt;- B4  Freq: 0,999997
030   	movzwl  RAX, [R10 + #24 + RDX &lt;&lt; #1]	# ushort/char
036   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

041   	ret
041
042   B6: #	N79 &lt;- B4  Freq: 1,01328e-06
042   	movl    RSI, #-28	# int
047   	movl    RBP, RDX	# spill
049   	movq    [rsp + #0], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
04f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #0 STK[1]=RBP
        # OopMap{[0]=Oop off=84}
054   	int3	# ShouldNotReachHere
054
059   B7: #	N79 &lt;- B1  Freq: 5e-07
059   	movq    RBP, RSI	# spill
05c   	movl    [rsp + #4], RDX	# spill
060   	movl    RSI, #-163	# int
      	nop 	# 2 bytes pad for loops and calls
067   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # OopMap{rbp=Oop off=108}
06c   	int3	# ShouldNotReachHere
06c
071   B8: #	N79 &lt;- B3  Freq: 4,76836e-07
071   	movq    [rsp + #0], RSI	# spill
075   	movl    [rsp + #12], RDX	# spill
079   	movl    RSI, #-163	# int
      	nop 	# 1 bytes pad for loops and calls
07f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #0 L[1]=rsp + #12 STK[0]=rsp + #12 STK[1]=RBP
        # OopMap{[0]=Oop off=132}
084   	int3	# ShouldNotReachHere
084
089   B9: #	N79 &lt;- B2  Freq: 1,01328e-06
089   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
08f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=148}
094   	int3	# ShouldNotReachHere
094

</opto_assembly>
<opto_assembly compile_id='10'>
{method}
 - this oop:          0x00007fffac9ed218
 - method holder:     &apos;java/lang/Integer&apos;
 - constants:         0x00007fffac9eb720 constant pool [383] {0x00007fffac9eb720} for &apos;java/lang/Integer&apos; cache=0x00007fffacaf7e90
 - access:            0xc1000009  public static 
 - name:              &apos;parseInt&apos;
 - signature:         &apos;(Ljava/lang/String;I)I&apos;
 - max stack:         5
 - max locals:        10
 - size of params:    2
 - method size:       12
 - vtable index:      -2
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00c8548: 0xba000000 i2c: 0x00007fffed147a20 c2i: 0x00007fffed147b5a c2iUV: 0x00007fffed147b30
 - compiled entry     0x00007fffed147b5a
 - code size:         259
 - code start:        0x00007fffac9ed068
 - code end (excl):   0x00007fffac9ed16b
 - method data:       0x00007fffacc1cd78
 - checked ex length: 1
 - checked ex start:  0x00007fffac9ed214
 - linenumber start:  0x00007fffac9ed16b
 - localvar length:   10
 - localvar start:    0x00007fffac9ed19a
#
#  int ( java/lang/String:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
abababab   N1: #	B1 &lt;- B90 B83 B84 B89 B81 B50 B73 B85 B70 B71 B53 B74 B68 B77 B59 B56 B62 B65  Freq: 1
abababab
000   B1: #	B90 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (616 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

00c   	movq    [rsp + #32], RSI	# spill
011   	movq    RDI, [RSI + #16 (8-bit)]	# ptr ! Field: java/lang/String.value
015   	NullCheck RSI
015
015   B2: #	B83 B3 &lt;- B1  Freq: 1
015   	movl    R10, RDX	# spill
018   	cmpl    RDX, #2
01b   	jl     B83  P=0,000000 C=1117,000000
01b
021   B3: #	B84 B4 &lt;- B2  Freq: 0,999999
021   	cmpl    RDX, #36
024   	jg     B84  P=0,000000 C=1117,000000
024
02a   B4: #	B89 B5 &lt;- B3  Freq: 0,999999
02a   	movl    R11, [RDI + #16 (8-bit)]	# range
02e   	NullCheck RDI
02e
02e   B5: #	B81 B6 &lt;- B4  Freq: 0,999998
02e   	testl   R11, R11
031   	jle     B81  P=0,000000 C=1117,000000
031
037   B6: #	B73 B7 &lt;- B5  Freq: 0,999997
037   	testl  R11, R11	# unsigned
03a   	jbe,u  B73  P=0,000001 C=-1,000000
03a
040   B7: #	B85 B8 &lt;- B6  Freq: 0,999996
040   	movzwl  RBP, [RDI + #24 (8-bit)]	# ushort/char
044   	cmpl    RBP, #48
047   	jl     B85  P=0,000000 C=1117,000000
047
04d   B8: #	B70 B9 &lt;- B7  Freq: 0,999996
04d   	testl   RDX, RDX
04f   	je     B70  P=0,000001 C=-1,000000
04f
055   B9: #	B71 B10 &lt;- B8  Freq: 0,999995
055   	movl    R9, R11	# spill
058   	decl    R9	# int
05b   	movl    RAX, #-2147483647	# int
060   	cmpl    rax, 0x80000000	# idiv
	jne,s   normal
	xorl    rdx, rdx
	cmpl    R10, -1
	je,s    done
normal: cdql
	idivl   R10
done:
073   	movl    [rsp + #20], RAX	# spill
077   	cmpl    R9, R11	# unsigned
07a   	jnb,u  B71  P=0,000001 C=-1,000000
07a
080   B10: #	B11 &lt;- B9  Freq: 0,999994
080   	movq    RBP, int[int:256]&lt;ciTypeArray length=256 type=&lt;ciTypeArrayKlass name=[I ident=806 address=0x00007ffff0142990&gt; ident=841 SCAVENGABLE address=0x00007fff880de6d0&gt; *	# ptr
08a   	movl    R8, #1	# int
090   	cmpl    R11, R8
093   	movl    R14, R11	# spill
096   	cmovlgt R14, R8	# min
09a   	xorl    R13, R13	# int
09d   	xorl    R8, R8	# int
0a0
0a0   B11: #	B74 B12 &lt;- B10 B20 	Loop: B11-B20 inner pre of N557 Freq: 1,99998
0a0   	movl    RCX, R13	# spill
0a3   	incl    RCX	# int
0a5   	testl   R13, R13
0a8   	jl     B74  P=0,000000 C=6701,000000
0a8
0ae   B12: #	B77 B13 &lt;- B11  Freq: 1,99998
0ae   	cmpl    R13, R11
0b1   	jge     B77  P=0,000000 C=6701,000000
0b1
0b7   B13: #	B75 B14 &lt;- B12  Freq: 1,99998
0b7   	movzwl  RDX, [RDI + #24 + R13 &lt;&lt; #1]	# ushort/char
0bd   	movl    RBX, RDX	# spill
0bf   	shrl    RBX, #8
0c2   	testl   RBX, RBX
0c4   	jne     B75  P=0,000000 C=8369,000000
0c4
0ca   B14: #	B69 B15 &lt;- B13  Freq: 1,99998
0ca   	cmpl    RDX, #256	# unsigned
0d0   	jnb,u  B69  P=0,000001 C=-1,000000
0d0
0d6   B15: #	B76 B16 &lt;- B14  Freq: 1,99997
0d6   	movl    RAX, [RBP + #24 + RDX &lt;&lt; #2]	# int
0da   	movl    RBX, RAX	# spill
0dc   	andl    RBX, #31	# int
0df   	cmpl    RBX, #9
0e2   	jne     B76  P=0,000000 C=8337,000000
0e2
0e8   B16: #	B78 B17 &lt;- B15  Freq: 1,99997
0e8   	shrl    RAX, #5
0eb   	andl    RAX, #31	# int
0ee   	addl    RAX, RDX	# int
0f0   	andl    RAX, #31	# int
0f3   	cmpl    RAX, R10
0f6   	jge     B78  P=0,000000 C=8337,000000
0f6
0fc   B17: #	B79 B18 &lt;- B16  Freq: 1,99997
0fc   	cmpl    R8, [RSP + #20 (32-bit)]
101   	jl     B79  P=0,000000 C=5585,000000
101
107   B18: #	B80 B19 &lt;- B17  Freq: 1,99997
107   	imull   R8, R10	# int
10b   	movl    RDX, RAX	# spill
10d   	addl    RDX, #-2147483647	# int
113   	cmpl    R8, RDX
116   	jl     B80  P=0,000000 C=5585,000000
116
11c   B19: #	B21 B20 &lt;- B18  Freq: 1,99997
11c   	movl    RSI, R8	# spill
11f   	subl    RSI, RAX	# int
121   	cmpl    RCX, R14
124   	jge,s   B21	# loop end  P=0,500000 C=5585,000000
124
126   B20: #	B11 &lt;- B19  Freq: 0,999985
126   	movl    R8, RSI	# spill
129   	movl    R13, RCX	# spill
12c   	jmp     B11
12c
131   B21: #	B72 B22 &lt;- B19  Freq: 0,999985
131   	movl    RBX, #-2147483648	# int
136   	cmpl    R11, R9
139   	cmovll R9, RBX	# signed, int
13d   	cmpl    RCX, R9
140   	jge     B72  P=0,000001 C=-1,000000
140
146   B22: #	B24 &lt;- B21  Freq: 0,999984
146   	# castII of RCX
146   	jmp,s   B24
      	nop 	# 8 bytes pad for loops and calls

150   B23: #	B24 &lt;- B36  top-of-loop Freq: 4,99524
150   	movl    RSI, R8	# spill
153   	movl    RCX, R13	# spill
153
156   B24: #	B54 B25 &lt;- B22 B23 	Loop: B24-B23 inner main of N221 Freq: 5,99522
156   	movzwl  RDX, [RDI + #24 + RCX &lt;&lt; #1]	# ushort/char
15b   	movl    RBX, RDX	# spill
15d   	shrl    RBX, #8
160   	testl   RBX, RBX
162   	jne     B54  P=0,000000 C=8369,000000
162
168   B25: #	B51 B26 &lt;- B24  Freq: 5,99522
168   	cmpl    RDX, #256	# unsigned
16e   	jnb,u  B51  P=0,000001 C=-1,000000
16e
174   B26: #	B57 B27 &lt;- B25  Freq: 5,99522
174   	movl    RAX, [RBP + #24 + RDX &lt;&lt; #2]	# int
178   	movl    RBX, RAX	# spill
17a   	andl    RBX, #31	# int
17d   	cmpl    RBX, #9
180   	jne     B57  P=0,000000 C=8337,000000
180
186   B27: #	B60 B28 &lt;- B26  Freq: 5,99521
186   	shrl    RAX, #5
189   	andl    RAX, #31	# int
18c   	addl    RAX, RDX	# int
18e   	andl    RAX, #31	# int
191   	cmpl    RAX, R10
194   	jge     B60  P=0,000000 C=8337,000000
194
19a   B28: #	B63 B29 &lt;- B27  Freq: 5,99521
19a   	cmpl    RSI, [RSP + #20 (32-bit)]
19e   	jl     B63  P=0,000000 C=5585,000000
19e
1a4   B29: #	B66 B30 &lt;- B28  Freq: 5,99521
1a4   	imull   RSI, R10	# int
1a8   	movl    RDX, RAX	# spill
1aa   	addl    RDX, #-2147483647	# int
1b0   	cmpl    RSI, RDX
1b2   	jl     B66  P=0,000000 C=5585,000000
1b2
1b8   B30: #	B55 B31 &lt;- B29  Freq: 5,9952
1b8   	subl    RSI, RAX	# int
1ba   	movl    R13, RCX	# spill
1bd   	addl    R13, #2	# int
1c1   	movslq  R8, RCX	# i2l
1c4   	movzwl  RDX, [RDI + #26 + R8 &lt;&lt; #1]	# ushort/char
1ca   	movl    RBX, RDX	# spill
1cc   	shrl    RBX, #8
1cf   	testl   RBX, RBX
1d1   	jne     B55  P=0,000000 C=8369,000000
1d1
1d7   B31: #	B52 B32 &lt;- B30  Freq: 5,9952
1d7   	cmpl    RDX, #256	# unsigned
1dd   	jnb,u  B52  P=0,000001 C=-1,000000
1dd
1e3   B32: #	B58 B33 &lt;- B31  Freq: 5,9952
1e3   	movl    RAX, [RBP + #24 + RDX &lt;&lt; #2]	# int
1e7   	movl    RBX, RAX	# spill
1e9   	andl    RBX, #31	# int
1ec   	cmpl    RBX, #9
1ef   	jne     B58  P=0,000000 C=8337,000000
1ef
1f5   B33: #	B61 B34 &lt;- B32  Freq: 5,99519
1f5   	shrl    RAX, #5
1f8   	andl    RAX, #31	# int
1fb   	addl    RAX, RDX	# int
1fd   	andl    RAX, #31	# int
200   	cmpl    RAX, R10
203   	jge     B61  P=0,000000 C=8337,000000
203
209   B34: #	B64 B35 &lt;- B33  Freq: 5,99519
209   	cmpl    RSI, [RSP + #20 (32-bit)]
20d   	jl     B64  P=0,000000 C=5585,000000
20d
213   B35: #	B67 B36 &lt;- B34  Freq: 5,99519
213   	imull   RSI, R10	# int
217   	movl    RDX, RAX	# spill
219   	addl    RDX, #-2147483647	# int
21f   	cmpl    RSI, RDX
221   	jl     B67  P=0,000000 C=5585,000000
221
227   B36: #	B23 B37 &lt;- B35  Freq: 5,99518
227   	movl    R8, RSI	# spill
22a   	subl    R8, RAX	# int
22d   	cmpl    R13, R9
230   	jl     B23	# loop end  P=0,833209 C=5585,000000
230
236   B37: #	B49 B38 &lt;- B72 B36  Freq: 0,999943
236   	cmpl    R13, R11
239   	jge     B49  P=0,500000 C=-1,000000
239
23f   B38: #	B39 &lt;- B37  Freq: 0,499972
23f   	# castII of R13
      	nop 	# 1 bytes pad for loops and calls

240   B39: #	B74 B40 &lt;- B38 B48 	Loop: B39-B48 inner post of N557 Freq: 0,999939
240   	movl    RCX, R13	# spill
243   	incl    RCX	# int
245   	testl   R13, R13
248   	jl     B74  P=0,000000 C=6701,000000
248
24e   B40: #	B77 B41 &lt;- B39  Freq: 0,999938
24e   	cmpl    R13, R11
251   	jge     B77  P=0,000000 C=6701,000000
251
257   B41: #	B56 B42 &lt;- B40  Freq: 0,999938
257   	movzwl  RDX, [RDI + #24 + R13 &lt;&lt; #1]	# ushort/char
25d   	movl    RBX, RDX	# spill
25f   	shrl    RBX, #8
262   	testl   RBX, RBX
264   	jne     B56  P=0,000000 C=8369,000000
264
26a   B42: #	B53 B43 &lt;- B41  Freq: 0,999938
26a   	cmpl    RDX, #256	# unsigned
270   	jnb,us  B53  P=0,000001 C=-1,000000
270
272   B43: #	B82 B44 &lt;- B42  Freq: 0,999937
272   	movl    RAX, [RBP + #24 + RDX &lt;&lt; #2]	# int
276   	movl    RBX, RAX	# spill
278   	andl    RBX, #31	# int
27b   	cmpl    RBX, #9
27e   	jne     B82  P=0,000000 C=8337,000000
27e
284   B44: #	B86 B45 &lt;- B43  Freq: 0,999936
284   	shrl    RAX, #5
287   	andl    RAX, #31	# int
28a   	addl    RAX, RDX	# int
28c   	andl    RAX, #31	# int
28f   	cmpl    RAX, R10
292   	jge     B86  P=0,000000 C=8337,000000
292
298   B45: #	B87 B46 &lt;- B44  Freq: 0,999936
298   	cmpl    R8, [RSP + #20 (32-bit)]
29d   	jl     B87  P=0,000000 C=5585,000000
29d
2a3   B46: #	B88 B47 &lt;- B45  Freq: 0,999935
2a3   	imull   R8, R10	# int
2a7   	movl    RDX, RAX	# spill
2a9   	addl    RDX, #-2147483647	# int
2af   	cmpl    R8, RDX
2b2   	jl     B88  P=0,000000 C=5585,000000
2b2
2b8   B47: #	B50 B48 &lt;- B46  Freq: 0,999935
2b8   	cmpl    RCX, R11
2bb   	jge,s   B50	# loop end  P=0,500000 C=5585,000000
2bb
2bd   B48: #	B39 &lt;- B47  Freq: 0,499967
2bd   	subl    R8, RAX	# int
2c0   	movl    R13, RCX	# spill
2c3   	jmp     B39
2c3
2c8   B49: #	B50 &lt;- B37  Freq: 0,499972
2c8   	movl    R8, RSI	# spill
2c8
2cb   B50: #	N1 &lt;- B47 B49  Freq: 0,999939
2cb   	subl    RAX, R8	# int
2ce   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

2d9   	ret
2d9
2da   B51: #	B52 &lt;- B25  Freq: 6,07483e-06
2da   	movl    R13, RCX	# spill
2dd   	incl    R13	# int
2e0
2e0   B52: #	B53 &lt;- B69 B51 B31  Freq: 1,41762e-05
2e0   	movl    R8, RSI	# spill
2e3   	movl    RCX, R13	# spill
2e3
2e6   B53: #	N1 &lt;- B42 B52  Freq: 1,51894e-05
2e6   	movl    RSI, #-28	# int
2eb   	movl    [rsp + #0], RCX	# spill
2ee   	movl    RCX, [rsp + #20]	# spill
2f2   	movl    [rsp + #4], RCX	# spill
2f6   	movl    [rsp + #8], R8	# spill
2fb   	movl    [rsp + #16], R10	# spill
300   	movl    [rsp + #20], RDX	# spill
304   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #24]
30e   	movl    [rsp + #32], R11	# spill
313   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.CharacterDataLatin1::getProperties @ bci:7  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007fff880de6d0 STK[1]=rsp + #20
        # java.lang.CharacterDataLatin1::digit @ bci:15  L[0]=_ L[1]=rsp + #20 L[2]=rsp + #16 L[3]=#-1 L[4]=_ L[5]=_
        # java.lang.Character::digit @ bci:6  L[0]=_ L[1]=_
        # java.lang.Character::digit @ bci:2  L[0]=_ L[1]=_
        # java.lang.Integer::parseInt @ bci:188  L[0]=rsp + #24 L[1]=rsp + #16 L[2]=#0 L[3]=rsp + #0 L[4]=rsp + #32 L[5]=#-2147483647 L[6]=_ L[7]=rsp + #4 L[8]=rsp + #8 L[9]=_
        # OopMap{[24]=Oop off=792}
318   	int3	# ShouldNotReachHere
318
31d   B54: #	B55 &lt;- B24  Freq: 2,99761e-06
31d   	movl    R13, RCX	# spill
320   	incl    R13	# int
323
323   B55: #	B56 &lt;- B75 B54 B30  Freq: 6,9952e-06
323   	movl    R8, RSI	# spill
326   	movl    RCX, R13	# spill
326
329   B56: #	N1 &lt;- B41 B55  Freq: 7,49517e-06
329   	movl    RSI, #-163	# int
32e   	movl    [rsp + #0], RCX	# spill
331   	movl    R9, [rsp + #20]	# spill
336   	movl    [rsp + #4], R9	# spill
33b   	movl    [rsp + #8], R8	# spill
340   	movl    [rsp + #16], R10	# spill
345   	movl    [rsp + #20], RDX	# spill
349   	movl    [rsp + #24], RBX	# spill
34d   	movl    [rsp + #28], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
353   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.CharacterData::of @ bci:4  L[0]=rsp + #20 STK[0]=rsp + #24
        # java.lang.Character::digit @ bci:1  L[0]=rsp + #20 L[1]=rsp + #16
        # java.lang.Character::digit @ bci:2  L[0]=_ L[1]=_
        # java.lang.Integer::parseInt @ bci:188  L[0]=rsp + #32 L[1]=rsp + #16 L[2]=#0 L[3]=rsp + #0 L[4]=rsp + #28 L[5]=#-2147483647 L[6]=_ L[7]=rsp + #4 L[8]=rsp + #8 L[9]=_
        # OopMap{[32]=Oop off=856}
358   	int3	# ShouldNotReachHere
358
35d   B57: #	B58 &lt;- B26  Freq: 2,99761e-06
35d   	movl    R13, RCX	# spill
360   	incl    R13	# int
363
363   B58: #	B59 &lt;- B76 B57 B32  Freq: 6,99519e-06
363   	movl    RBP, RAX	# spill
365   	movl    R8, RSI	# spill
368   	movl    RCX, R13	# spill
368
36b   B59: #	N1 &lt;- B82 B58  Freq: 7,49516e-06
36b   	movl    RSI, #-163	# int
370   	movl    [rsp + #4], RCX	# spill
374   	movl    R9, [rsp + #20]	# spill
379   	movl    [rsp + #8], R9	# spill
37e   	movl    [rsp + #12], R8	# spill
383   	movl    [rsp + #16], RDX	# spill
387   	movl    [rsp + #20], R10	# spill
38c   	movl    [rsp + #24], RBX	# spill
390   	movl    [rsp + #28], R11	# spill
      	nop 	# 2 bytes pad for loops and calls
397   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.CharacterDataLatin1::digit @ bci:31  L[0]=_ L[1]=rsp + #16 L[2]=rsp + #20 L[3]=#-1 L[4]=RBP L[5]=_ STK[0]=rsp + #24 STK[1]=#9
        # java.lang.Character::digit @ bci:6  L[0]=_ L[1]=_
        # java.lang.Character::digit @ bci:2  L[0]=_ L[1]=_
        # java.lang.Integer::parseInt @ bci:188  L[0]=rsp + #32 L[1]=rsp + #20 L[2]=#0 L[3]=rsp + #4 L[4]=rsp + #28 L[5]=#-2147483647 L[6]=_ L[7]=rsp + #8 L[8]=rsp + #12 L[9]=_
        # OopMap{[32]=Oop off=924}
39c   	int3	# ShouldNotReachHere
39c
3a1   B60: #	B61 &lt;- B27  Freq: 2,85874e-06
3a1   	movl    R13, RCX	# spill
3a4   	incl    R13	# int
3a7
3a7   B61: #	B62 &lt;- B78 B60 B33  Freq: 6,67113e-06
3a7   	movl    RBP, RAX	# spill
3a9   	movl    R8, RSI	# spill
3ac   	movl    RCX, R13	# spill
3ac
3af   B62: #	N1 &lt;- B86 B61  Freq: 7,14794e-06
3af   	movl    RSI, #-163	# int
3b4   	movl    [rsp + #4], RCX	# spill
3b8   	movl    RCX, [rsp + #20]	# spill
3bc   	movl    [rsp + #8], RCX	# spill
3c0   	movl    [rsp + #12], R8	# spill
3c5   	movl    [rsp + #16], R10	# spill
3ca   	movl    [rsp + #20], R11	# spill
3cf   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.CharacterDataLatin1::digit @ bci:82  L[0]=_ L[1]=_ L[2]=_ L[3]=RBP L[4]=_ L[5]=_ STK[0]=RBP STK[1]=rsp + #16
        # java.lang.Character::digit @ bci:6  L[0]=_ L[1]=_
        # java.lang.Character::digit @ bci:2  L[0]=_ L[1]=_
        # java.lang.Integer::parseInt @ bci:188  L[0]=rsp + #32 L[1]=rsp + #16 L[2]=#0 L[3]=rsp + #4 L[4]=rsp + #20 L[5]=#-2147483647 L[6]=_ L[7]=rsp + #8 L[8]=rsp + #12 L[9]=_
        # OopMap{[32]=Oop off=980}
3d4   	int3	# ShouldNotReachHere
3d4
3d9   B63: #	B64 &lt;- B28  Freq: 2,85874e-06
3d9   	movl    R13, RCX	# spill
3dc   	incl    R13	# int
3df
3df   B64: #	B65 &lt;- B79 B63 B34  Freq: 6,67113e-06
3df   	movl    RBP, RAX	# spill
3e1   	movl    R8, RSI	# spill
3e4   	movl    RCX, R13	# spill
3e4
3e7   B65: #	N1 &lt;- B87 B64  Freq: 7,14793e-06
3e7   	movl    RSI, #-163	# int
3ec   	movl    [rsp + #0], R10	# spill
3f0   	movl    [rsp + #4], RCX	# spill
3f4   	movl    [rsp + #16], R8	# spill
3f9   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #24]
403   	movl    [rsp + #32], R11	# spill
      	nop 	# 3 bytes pad for loops and calls
40b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Integer::parseInt @ bci:202  L[0]=rsp + #24 L[1]=rsp + #0 L[2]=#0 L[3]=rsp + #4 L[4]=rsp + #32 L[5]=#-2147483647 L[6]=_ L[7]=rsp + #20 L[8]=rsp + #16 L[9]=RBP STK[0]=rsp + #16 STK[1]=rsp + #20
        # OopMap{[24]=Oop off=1040}
410   	int3	# ShouldNotReachHere
410
415   B66: #	B67 &lt;- B29  Freq: 2,85874e-06
415   	movl    R13, RCX	# spill
418   	incl    R13	# int
41b
41b   B67: #	B68 &lt;- B80 B66 B35  Freq: 6,67113e-06
41b   	movl    RBP, RAX	# spill
41d   	movl    R8, RSI	# spill
420   	movl    RCX, R13	# spill
420
423   B68: #	N1 &lt;- B88 B67  Freq: 7,14793e-06
423   	movl    RSI, #-163	# int
428   	movl    [rsp + #0], R10	# spill
42c   	movl    [rsp + #4], RCX	# spill
430   	movl    R9, [rsp + #20]	# spill
435   	movl    [rsp + #8], R9	# spill
43a   	movl    [rsp + #16], R8	# spill
43f   	movl    [rsp + #20], RDX	# spill
443   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #24]
44d   	movl    [rsp + #32], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
453   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Integer::parseInt @ bci:223  L[0]=rsp + #24 L[1]=rsp + #0 L[2]=#0 L[3]=rsp + #4 L[4]=rsp + #32 L[5]=#-2147483647 L[6]=_ L[7]=rsp + #8 L[8]=rsp + #16 L[9]=RBP STK[0]=rsp + #16 STK[1]=rsp + #20
        # OopMap{[24]=Oop off=1112}
458   	int3	# ShouldNotReachHere
458
45d   B69: #	B52 &lt;- B14  Freq: 2,02653e-06
45d   	movl    RSI, R8	# spill
460   	movl    R13, RCX	# spill
463   	jmp     B52
463
468   B70: #	N1 &lt;- B8  Freq: 1,01327e-06
468   	movl    RSI, #-106	# int
      	nop 	# 2 bytes pad for loops and calls
46f   	call,static  wrapper for: uncommon_trap(reason=&apos;div0_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Integer::parseInt @ bci:167  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#-2147483647 STK[1]=#0
        # OopMap{off=1140}
474   	int3	# ShouldNotReachHere
474
479   B71: #	N1 &lt;- B9  Freq: 1,01327e-06
479   	movl    RSI, #-122	# int
47e   	movl    RBP, R10	# spill
481   	movl    [rsp + #4], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
487   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.Integer::parseInt @ bci:179  L[0]=rsp + #32 L[1]=RBP L[2]=#0 L[3]=#0 L[4]=rsp + #4 L[5]=#-2147483647 L[6]=_ L[7]=rsp + #20 L[8]=#0 L[9]=_
        # OopMap{[32]=Oop off=1164}
48c   	int3	# ShouldNotReachHere
48c
491   B72: #	B37 &lt;- B21  Freq: 1,01326e-06
491   	movl    R9, R8	# spill
494   	movl    R8, RSI	# spill
497   	movl    RSI, R9	# spill
49a   	movl    R13, RCX	# spill
49d   	jmp     B37
49d
4a2   B73: #	N1 &lt;- B6  Freq: 9,99997e-07
4a2   	movl    RSI, #-28	# int
4a7   	movl    RBP, RDX	# spill
4a9   	movq    [rsp + #0], RDI	# spill
4ad   	movl    [rsp + #16], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
4b3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=rsp + #0 STK[1]=#0
        # java.lang.Integer::parseInt @ bci:110  L[0]=rsp + #32 L[1]=RBP L[2]=#0 L[3]=#0 L[4]=rsp + #16 L[5]=#-2147483647 L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{[0]=Oop [32]=Oop off=1208}
4b8   	int3	# ShouldNotReachHere
4b8
4bd   B74: #	N1 &lt;- B39 B11  Freq: 1,49996e-06
4bd   	movl    RSI, #-163	# int
4c2   	movl    RBP, R10	# spill
4c5   	movl    [rsp + #0], RCX	# spill
4c8   	movl    R10, [rsp + #20]	# spill
4cd   	movl    [rsp + #4], R10	# spill
4d2   	movl    [rsp + #8], R8	# spill
4d7   	movl    [rsp + #16], R13	# spill
4dc   	movl    [rsp + #20], R11	# spill
      	nop 	# 2 bytes pad for loops and calls
4e3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:1  L[0]=rsp + #32 L[1]=rsp + #16 STK[0]=rsp + #16
        # java.lang.Integer::parseInt @ bci:184  L[0]=rsp + #32 L[1]=RBP L[2]=#0 L[3]=rsp + #0 L[4]=rsp + #20 L[5]=#-2147483647 L[6]=_ L[7]=rsp + #4 L[8]=rsp + #8 L[9]=_
        # OopMap{[32]=Oop off=1256}
4e8   	int3	# ShouldNotReachHere
4e8
4ed   B75: #	B55 &lt;- B13  Freq: 9,99988e-07
4ed   	movl    RSI, R8	# spill
4f0   	movl    R13, RCX	# spill
4f3   	jmp     B55
4f3
4f8   B76: #	B58 &lt;- B15  Freq: 9,99987e-07
4f8   	movl    RSI, R8	# spill
4fb   	movl    R13, RCX	# spill
4fe   	jmp     B58
4fe
503   B77: #	N1 &lt;- B40 B12  Freq: 1,43047e-06
503   	movl    RSI, #-163	# int
508   	movl    RBP, R10	# spill
50b   	movl    [rsp + #0], RCX	# spill
50e   	movl    R9, [rsp + #20]	# spill
513   	movl    [rsp + #4], R9	# spill
518   	movl    [rsp + #8], R8	# spill
51d   	movl    [rsp + #16], R13	# spill
522   	movl    [rsp + #40], R11	# spill
527   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::charAt @ bci:10  L[0]=rsp + #32 L[1]=rsp + #16 STK[0]=rsp + #16 STK[1]=rsp + #40
        # java.lang.Integer::parseInt @ bci:184  L[0]=rsp + #32 L[1]=RBP L[2]=#0 L[3]=rsp + #0 L[4]=rsp + #40 L[5]=#-2147483647 L[6]=_ L[7]=rsp + #4 L[8]=rsp + #8 L[9]=_
        # OopMap{[32]=Oop off=1324}
52c   	int3	# ShouldNotReachHere
52c
531   B78: #	B61 &lt;- B16  Freq: 9,53661e-07
531   	movl    RSI, R8	# spill
534   	movl    R13, RCX	# spill
537   	jmp     B61
537
53c   B79: #	B64 &lt;- B17  Freq: 9,53661e-07
53c   	movl    RSI, R8	# spill
53f   	movl    R13, RCX	# spill
542   	jmp     B64
542
547   B80: #	B67 &lt;- B18  Freq: 9,5366e-07
547   	movl    RSI, R8	# spill
54a   	movl    R13, RCX	# spill
54d   	jmp     B67
54d
552   B81: #	N1 &lt;- B5  Freq: 4,99999e-07
552   	movl    RSI, #-163	# int
557   	movl    RBP, RDX	# spill
559   	movl    [rsp + #12], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
55f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Integer::parseInt @ bci:105  L[0]=rsp + #32 L[1]=RBP L[2]=#0 L[3]=#0 L[4]=rsp + #12 L[5]=#-2147483647 L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #12
        # OopMap{[32]=Oop off=1380}
564   	int3	# ShouldNotReachHere
564
569   B82: #	B59 &lt;- B43  Freq: 4,99968e-07
569   	movl    RBP, RAX	# spill
56b   	jmp     B59
56b
570   B83: #	N1 &lt;- B2  Freq: 4,76837e-07
570   	movl    RSI, #-163	# int
575   	movl    [rsp + #0], RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
57b   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Integer::parseInt @ bci:16  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #0 STK[1]=#2
        # OopMap{[32]=Oop off=1408}
580   	int3	# ShouldNotReachHere
580
585   B84: #	N1 &lt;- B3  Freq: 4,76837e-07
585   	movl    RSI, #-163	# int
58a   	movl    [rsp + #0], RDX	# spill
      	nop 	# 2 bytes pad for loops and calls
58f   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Integer::parseInt @ bci:54  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #0 STK[1]=#36
        # OopMap{[32]=Oop off=1428}
594   	int3	# ShouldNotReachHere
594
599   B85: #	N1 &lt;- B7  Freq: 4,76835e-07
599   	movl    RSI, #-163	# int
59e   	movl    [rsp + #0], RDX	# spill
5a1   	movl    [rsp + #4], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
5a7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Integer::parseInt @ bci:119  L[0]=rsp + #32 L[1]=rsp + #0 L[2]=#0 L[3]=#0 L[4]=rsp + #4 L[5]=#-2147483647 L[6]=RBP L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP STK[1]=#48
        # OopMap{[32]=Oop off=1452}
5ac   	int3	# ShouldNotReachHere
5ac
5b1   B86: #	B62 &lt;- B44  Freq: 4,76807e-07
5b1   	movl    RBP, RAX	# spill
5b3   	jmp     B62
5b3
5b8   B87: #	B65 &lt;- B45  Freq: 4,76806e-07
5b8   	movl    RBP, RAX	# spill
5ba   	jmp     B65
5ba
5bf   B88: #	B68 &lt;- B46  Freq: 4,76806e-07
5bf   	movl    RBP, RAX	# spill
5c1   	jmp     B68
5c1
5c6   B89: #	N1 &lt;- B4  Freq: 1,01328e-06
5c6   	movl    RSI, #-10	# int
5cb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::length @ bci:4  L[0]=_ STK[0]=#NULL
        # java.lang.Integer::parseInt @ bci:94  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{off=1488}
5d0   	int3	# ShouldNotReachHere
5d0
5d5   B90: #	N1 &lt;- B1  Freq: 4,76837e-07
5d5   	movl    RSI, #-163	# int
5da   	movl    RBP, RDX	# spill
5dc   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
      	nop 	# 2 bytes pad for loops and calls
5e7   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # java.lang.Integer::parseInt @ bci:1  L[0]=rsp + #0 L[1]=RBP L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #0
        # OopMap{[0]=Oop off=1516}
5ec   	int3	# ShouldNotReachHere
5ec

</opto_assembly>
<opto_assembly compile_id='12'>
{method}
 - this oop:          0x00007fffac9ed540
 - method holder:     &apos;java/lang/Integer&apos;
 - constants:         0x00007fffac9eb720 constant pool [383] {0x00007fffac9eb720} for &apos;java/lang/Integer&apos; cache=0x00007fffacaf7e90
 - access:            0x81000009  public static 
 - name:              &apos;parseInt&apos;
 - signature:         &apos;(Ljava/lang/String;)I&apos;
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       12
 - vtable index:      -2
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00c8398: 0xb0000000 i2c: 0x00007fffed1461a0 c2i: 0x00007fffed1462d7 c2iUV: 0x00007fffed1462ad
 - compiled entry     0x00007fffed1462d7
 - code size:         7
 - code start:        0x00007fffac9ed520
 - code end (excl):   0x00007fffac9ed527
 - method data:       0x00007fffacc1dda0
 - checked ex length: 1
 - checked ex start:  0x00007fffac9ed53c
 - linenumber start:  0x00007fffac9ed527
 - localvar length:   1
 - localvar start:    0x00007fffac9ed52e
#
#  int ( java/lang/String:exact * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:exact *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 &lt;- B2 B3  Freq: 1
abababab
000   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (112 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c   	movl    RDX, #10	# int
      	nop 	# 2 bytes pad for loops and calls
013   	call,static  java.lang.Integer::parseInt
        # java.lang.Integer::parseInt @ bci:3  L[0]=_
        # OopMap{off=24}
018
018   B2: #	N1 &lt;- B1  Freq: 0,99998
        # Block is sole successor of call
018   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

023   	ret
023
024   B3: #	N1 &lt;- B1  Freq: 1e-05
024   	# exception oop is in rax; no code emitted
024   	movq    RSI, RAX	# spill
027   	addq    rsp, 16	# Destroy frame
	popq   rbp

02c   	jmp     rethrow_stub
02c

</opto_assembly>
<opto_assembly compile_id='13'>
{method}
 - this oop:          0x00007fffacd215b0
 - method holder:     &apos;AtomicLongTest&apos;
 - constants:         0x00007fffacd210a0 constant pool [103] {0x00007fffacd210a0} for &apos;AtomicLongTest&apos; cache=0x00007fffacd21b88
 - access:            0x81000008  static 
 - name:              &apos;update&apos;
 - signature:         &apos;()V&apos;
 - max stack:         5
 - max locals:        0
 - size of params:    0
 - method size:       12
 - vtable index:      -2
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00c87d0: 0x i2c: 0x00007fffed149620 c2i: 0x00007fffed149753 c2iUV: 0x00007fffed149729
 - compiled entry     0x00007fffed149753
 - code size:         43
 - code start:        0x00007fffacd21578
 - code end (excl):   0x00007fffacd215a3
 - method data:       0x00007fffacd22208
 - checked ex length: 0
 - linenumber start:  0x00007fffacd215a3
 - localvar length:   0
#
#  void (  )
#
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 &lt;- B6 B9 B7 B8 B5  Freq: 1
abababab
000   B1: #	B6 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (200 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c   	movq    R10, #4294967296	# long
016   	movq    R11, java/lang/Class:exact *	# ptr
020   	addq    [R11 + #176 (32-bit)], R10	# long ! Field: AtomicLongTest.l
027   	movq    R10, [R11 + #160 (32-bit)]	# ptr ! Field: AtomicLongTest.al
02e   	testq   R10, R10	# ptr
031   	je,s   B6  P=0,000001 C=-1,000000
031
033   B2: #	B9 B3 &lt;- B1  Freq: 0,999999
033   	MEMBAR-release ! (empty encoding)
033   	
033   	ADDQ  [[R10 + #16 (8-bit)]],#4294967296
039   	
039   	MEMBAR-acquire ! (empty encoding)
039   	movq    R10, [R11 + #160 (32-bit)]	# ptr ! Field: AtomicLongTest.al
040   	movq    R10, [R10 + #16 (8-bit)]	# long ! Field: volatile java/util/concurrent/atomic/AtomicLong.value
044   	NullCheck R10
044
044   B3: #	B7 B4 &lt;- B2  Freq: 0,999998
044   	movq    R8, [R11 + #176 (32-bit)]	# long ! Field: AtomicLongTest.l
04b   	MEMBAR-acquire ! (empty encoding)
04b   	cmpq    R8, R10
04e   	jne,s   B7  P=0,000000 C=6700,000000
04e
050   B4: #	B8 B5 &lt;- B3  Freq: 0,999997
050   	movzbl  RBP, [R11 + #192 (32-bit)]	# ubyte ! Field: AtomicLongTest.ok
058   	testl   RBP, RBP
05a   	je,s   B8  P=0,000000 C=10000,000000
05a
05c   B5: #	N1 &lt;- B4  Freq: 0,999997
05c   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

067   	ret
067
068   B6: #	N1 &lt;- B1  Freq: 1,01328e-06
068   	movl    RSI, #-10	# int
      	nop 	# 2 bytes pad for loops and calls
06f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # AtomicLongTest::update @ bci:16  STK[0]=#NULL STK[1]=#4294967296 STK[2]=_
        # OopMap{off=116}
074   	int3	# ShouldNotReachHere
074
079   B7: #	N1 &lt;- B3  Freq: 4,99999e-07
079   	cmpq    R8, R10	# CmpL3
	movl    RBP, -1
	jl,s    done
	setne   RBP
	movzbl  RBP, RBP
	done:
08b   	movl    RSI, #-163	# int
      	nop 	# 3 bytes pad for loops and calls
093   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # AtomicLongTest::update @ bci:30  STK[0]=RBP
        # OopMap{off=152}
098   	int3	# ShouldNotReachHere
098
09d   B8: #	N1 &lt;- B4  Freq: 4,76836e-07
09d   	movl    RSI, #-163	# int
      	nop 	# 1 bytes pad for loops and calls
0a3   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # AtomicLongTest::printOK @ bci:3  STK[0]=RBP
        # AtomicLongTest::update @ bci:33 
        # OopMap{off=168}
0a8   	int3	# ShouldNotReachHere
0a8
0ad   B9: #	N1 &lt;- B2  Freq: 1,01328e-06
0ad   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
0b3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # AtomicLongTest::update @ bci:26  STK[0]=_ STK[1]=_ STK[2]=#NULL
        # OopMap{off=184}
0b8   	int3	# ShouldNotReachHere
0b8

</opto_assembly>
<print_nmethod stamp='14,424'>
Compiled method (c2)   14424   13             AtomicLongTest::update (43 bytes)
 total in heap  [0x00007fffed19e590,0x00007fffed19e9c0] = 1072
 relocation     [0x00007fffed19e6c0,0x00007fffed19e6e0] = 32
 main code      [0x00007fffed19e6e0,0x00007fffed19e7a0] = 192
 stub code      [0x00007fffed19e7a0,0x00007fffed19e7b8] = 24
 oops           [0x00007fffed19e7b8,0x00007fffed19e7c0] = 8
 metadata       [0x00007fffed19e7c0,0x00007fffed19e7e8] = 40
 scopes data    [0x00007fffed19e7e8,0x00007fffed19e868] = 128
 scopes pcs     [0x00007fffed19e868,0x00007fffed19e9a8] = 320
 dependencies   [0x00007fffed19e9a8,0x00007fffed19e9b0] = 8
 nul chk table  [0x00007fffed19e9b0,0x00007fffed19e9c0] = 16
Loaded disassembler from hsdis-amd64.so
Decoding compiled method 0x00007fffed19e590:
Code:
[Disassembling for mach=&apos;i386:x86-64&apos;]
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fffacd215b0} &apos;update&apos; &apos;()V&apos; in &apos;AtomicLongTest&apos;
  #           [sp+0x20]  (sp of caller)
  ;; N1: #	B1 &lt;- B6 B9 B7 B8 B5  Freq: 1

  ;; B1: #	B6 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffed19e6e0: mov    %eax,-0x16000(%rsp)
  0x00007fffed19e6e7: push   %rbp
  0x00007fffed19e6e8: sub    $0x10,%rsp         ;*synchronization entry
                                                ; - AtomicLongTest::update@-1 (line 10)

  0x00007fffed19e6ec: movabs $0x100000000,%r10
  0x00007fffed19e6f6: movabs $0x7fffd86bcf58,%r11  ;   {oop(a &apos;java/lang/Class&apos; = &apos;AtomicLongTest&apos;)}
  0x00007fffed19e700: add    %r10,0xb0(%r11)    ;*putstatic l
                                                ; - AtomicLongTest::update@7 (line 10)

  0x00007fffed19e707: mov    0xa0(%r11),%r10    ;*getstatic al
                                                ; - AtomicLongTest::update@10 (line 11)

  0x00007fffed19e70e: test   %r10,%r10
  0x00007fffed19e711: je     0x00007fffed19e748
  ;; B2: #	B9 B3 &lt;- B1  Freq: 0,999999

  0x00007fffed19e713: lock addq $0x0,0x10(%r10)  ;*invokevirtual getAndAddLong
                                                ; - java.util.concurrent.atomic.AtomicLong::addAndGet@8 (line 219)
                                                ; - AtomicLongTest::update@16 (line 11)

  0x00007fffed19e719: mov    0xa0(%r11),%r10    ;*getstatic al
                                                ; - AtomicLongTest::update@23 (line 13)

  0x00007fffed19e720: mov    0x10(%r10),%r10    ; implicit exception: dispatches to 0x00007fffed19e78d
  ;; B3: #	B7 B4 &lt;- B2  Freq: 0,999998

  0x00007fffed19e724: mov    0xb0(%r11),%r8     ;*getfield value
                                                ; - java.util.concurrent.atomic.AtomicLong::get@1 (line 105)
                                                ; - java.util.concurrent.atomic.AtomicLong::longValue@1 (line 329)
                                                ; - AtomicLongTest::update@26 (line 13)

  0x00007fffed19e72b: cmp    %r10,%r8
  0x00007fffed19e72e: jne    0x00007fffed19e759  ;*ifne
                                                ; - AtomicLongTest::update@30 (line 13)

  ;; B4: #	B8 B5 &lt;- B3  Freq: 0,999997

  0x00007fffed19e730: movzbl 0xc0(%r11),%ebp    ;*getstatic ok
                                                ; - AtomicLongTest::printOK@0 (line 30)
                                                ; - AtomicLongTest::update@33 (line 14)

  0x00007fffed19e738: test   %ebp,%ebp
  0x00007fffed19e73a: je     0x00007fffed19e77d  ;*ifne
                                                ; - AtomicLongTest::printOK@3 (line 30)
                                                ; - AtomicLongTest::update@33 (line 14)

  ;; B5: #	N1 &lt;- B4  Freq: 0,999997

  0x00007fffed19e73c: add    $0x10,%rsp
  0x00007fffed19e740: pop    %rbp
  0x00007fffed19e741: test   %eax,0xae588b9(%rip)        # 0x00007ffff7ff7000
                                                ;   {poll_return}
  0x00007fffed19e747: retq   
  ;; B6: #	N1 &lt;- B1  Freq: 1,01328e-06

  0x00007fffed19e748: mov    $0xfffffff6,%esi
  0x00007fffed19e74d: nop
  0x00007fffed19e74e: nop
  0x00007fffed19e74f: callq  0x00007fffed107760  ; OopMap{off=116}
                                                ;*invokevirtual addAndGet
                                                ; - AtomicLongTest::update@16 (line 11)
                                                ;   {runtime_call}
  0x00007fffed19e754: callq  0x00007ffff6894940  ;*invokevirtual addAndGet
                                                ; - AtomicLongTest::update@16 (line 11)
                                                ;   {runtime_call}
  ;; B7: #	N1 &lt;- B3  Freq: 4,99999e-07

  0x00007fffed19e759: cmp    %r10,%r8
  0x00007fffed19e75c: mov    $0xffffffff,%ebp
  0x00007fffed19e761: jl     0x00007fffed19e76b
  0x00007fffed19e763: setne  %bpl
  0x00007fffed19e767: movzbl %bpl,%ebp          ;*lcmp
                                                ; - AtomicLongTest::update@29 (line 13)

  0x00007fffed19e76b: mov    $0xffffff5d,%esi
  0x00007fffed19e770: nop
  0x00007fffed19e771: nop
  0x00007fffed19e772: nop
  0x00007fffed19e773: callq  0x00007fffed107760  ; OopMap{off=152}
                                                ;*ifne
                                                ; - AtomicLongTest::update@30 (line 13)
                                                ;   {runtime_call}
  0x00007fffed19e778: callq  0x00007ffff6894940  ;*ifne
                                                ; - AtomicLongTest::update@30 (line 13)
                                                ;   {runtime_call}
  ;; B8: #	N1 &lt;- B4  Freq: 4,76836e-07

  0x00007fffed19e77d: mov    $0xffffff5d,%esi
  0x00007fffed19e782: nop
  0x00007fffed19e783: callq  0x00007fffed107760  ; OopMap{off=168}
                                                ;*ifne
                                                ; - AtomicLongTest::printOK@3 (line 30)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {runtime_call}
  0x00007fffed19e788: callq  0x00007ffff6894940  ;*ifne
                                                ; - AtomicLongTest::printOK@3 (line 30)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {runtime_call}
  ;; B9: #	N1 &lt;- B2  Freq: 1,01328e-06

  0x00007fffed19e78d: mov    $0xfffffff6,%esi
  0x00007fffed19e792: nop
  0x00007fffed19e793: callq  0x00007fffed107760  ; OopMap{off=184}
                                                ;*invokevirtual longValue
                                                ; - AtomicLongTest::update@26 (line 13)
                                                ;   {runtime_call}
  0x00007fffed19e798: callq  0x00007ffff6894940  ;*invokevirtual longValue
                                                ; - AtomicLongTest::update@26 (line 13)
                                                ;   {runtime_call}
  0x00007fffed19e79d: hlt    
  0x00007fffed19e79e: hlt    
  0x00007fffed19e79f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fffed19e7a0: jmpq   0x00007fffed1659e0  ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffed19e7a5: callq  0x00007fffed19e7aa
  0x00007fffed19e7aa: subq   $0x5,(%rsp)
  0x00007fffed19e7af: jmpq   0x00007fffed107220  ;   {runtime_call}
  0x00007fffed19e7b4: hlt    
  0x00007fffed19e7b5: hlt    
  0x00007fffed19e7b6: hlt    
  0x00007fffed19e7b7: hlt    
pc-bytecode offsets:
PcDesc(pc=0x7fffed19e6df offset=ffffffff bits=0):
PcDesc(pc=0x7fffed19e6ec offset=c bits=0):
   AtomicLongTest::update  @-1
PcDesc(pc=0x7fffed19e707 offset=27 bits=0):
   AtomicLongTest::update  @7
PcDesc(pc=0x7fffed19e70e offset=2e bits=0):
   AtomicLongTest::update  @10
PcDesc(pc=0x7fffed19e719 offset=39 bits=0):
   java.util.concurrent.atomic.AtomicLong::addAndGet  @8
   AtomicLongTest::update  @16
PcDesc(pc=0x7fffed19e720 offset=40 bits=0):
   AtomicLongTest::update  @23
PcDesc(pc=0x7fffed19e72b offset=4b bits=0):
   java.util.concurrent.atomic.AtomicLong::get  @1
   java.util.concurrent.atomic.AtomicLong::longValue  @1
   AtomicLongTest::update  @26
PcDesc(pc=0x7fffed19e730 offset=50 bits=0):
   AtomicLongTest::update  @30
PcDesc(pc=0x7fffed19e738 offset=58 bits=0):
   AtomicLongTest::printOK  @0
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19e73c offset=5c bits=0):
   AtomicLongTest::printOK  @3
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19e754 offset=74 bits=0):
   AtomicLongTest::update  @16
PcDesc(pc=0x7fffed19e759 offset=79 bits=0):
   AtomicLongTest::update  @16
PcDesc(pc=0x7fffed19e76b offset=8b bits=0):
   AtomicLongTest::update  @29
PcDesc(pc=0x7fffed19e778 offset=98 bits=1):
   AtomicLongTest::update  @30  reexecute=true
PcDesc(pc=0x7fffed19e77d offset=9d bits=0):
   AtomicLongTest::update  @30
PcDesc(pc=0x7fffed19e788 offset=a8 bits=1):
   AtomicLongTest::printOK  @3  reexecute=true
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19e78d offset=ad bits=0):
   AtomicLongTest::printOK  @3
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19e798 offset=b8 bits=0):
   AtomicLongTest::update  @26
PcDesc(pc=0x7fffed19e79d offset=bd bits=0):
   AtomicLongTest::update  @26
PcDesc(pc=0x7fffed19e7b9 offset=d9 bits=0):
OopMapSet contains 4 OopMaps

#0 
OopMap{off=116}
#1 
OopMap{off=152}
#2 
OopMap{off=168}
#3 
OopMap{off=184}
</print_nmethod>
<opto_assembly compile_id='14'>
{method}
 - this oop:          0x00007fffacade6a0
 - method holder:     &apos;java/util/concurrent/atomic/AtomicLong&apos;
 - constants:         0x00007fffacadd608 constant pool [148] {0x00007fffacadd608} for &apos;java/util/concurrent/atomic/AtomicLong&apos; cache=0x00007fffacadf140
 - access:            0x81000011  public final 
 - name:              &apos;addAndGet&apos;
 - signature:         &apos;(J)J&apos;
 - max stack:         7
 - max locals:        3
 - size of params:    3
 - method size:       12
 - vtable index:      -2
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00c8a10: 0xbbe00000 i2c: 0x00007fffed153420 c2i: 0x00007fffed15355b c2iUV: 0x00007fffed153531
 - compiled entry     0x00007fffed15355b
 - code size:         14
 - code start:        0x00007fffacade670
 - code end (excl):   0x00007fffacade67e
 - method data:       0x00007fffacc1df30
 - checked ex length: 0
 - linenumber start:  0x00007fffacade67e
 - localvar length:   2
 - localvar start:    0x00007fffacade686
#
#  long/half ( java/util/concurrent/atomic/AtomicLong:NotNull *, long, half )
#
#r018 rsi:rsi   : parm 0: java/util/concurrent/atomic/AtomicLong:NotNull *
#r016 rdx:rdx   : parm 1: long
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N36: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   		cmpq    rax, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 4 bytes pad for loops and calls

010   B1: #	N36 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

01c   	MEMBAR-release ! (empty encoding)
01c   	
01c   	movq    R10, RDX	# spill
01f   	XADDQ  [[RSI + #16 (8-bit)]],R10
025   	
025   	MEMBAR-acquire ! (empty encoding)
025   	movq    RAX, RDX	# spill
028   	addq    RAX, R10	# long
02b   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

036   	ret
036

</opto_assembly>
<opto_assembly compile_id='15'>
{method}
 - this oop:          0x00007fffac9c3518
 - method holder:     &apos;sun/misc/Unsafe&apos;
 - constants:         0x00007fffac9bd730 constant pool [419] {0x00007fffac9bd730} for &apos;sun/misc/Unsafe&apos; cache=0x00007fffac9f7db0
 - access:            0xc1000011  public final 
 - name:              &apos;getAndAddLong&apos;
 - signature:         &apos;(Ljava/lang/Object;JJ)J&apos;
 - max stack:         11
 - max locals:        8
 - size of params:    6
 - method size:       12
 - intrinsic id:      150 _getAndAddLong
 - vtable index:      -2
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00a1920: 0xbbbebe00 i2c: 0x00007fffed120ea0 c2i: 0x00007fffed120fbd c2iUV: 0x00007fffed120f93
 - compiled entry     0x00007fffed120fbd
 - code size:         27
 - code start:        0x00007fffac9c34b8
 - code end (excl):   0x00007fffac9c34d3
 - method data:       0x00007fffacc1e0f0
 - checked ex length: 0
 - linenumber start:  0x00007fffac9c34d3
 - localvar length:   5
 - localvar start:    0x00007fffac9c34da
#
#  long/half ( sun/misc/Unsafe:NotNull:exact *, java/lang/Object *, long, half, long, half )
#
#r018 rsi:rsi   : parm 0: sun/misc/Unsafe:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/lang/Object *
#r010 rcx:rcx   : parm 2: long
#r004 r8:r8   : parm 4: long
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N73: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   		cmpq    rax, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 4 bytes pad for loops and calls

010   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (232 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

01c   	movq    R11, RSI	# spill
01f   	
01f   	movq    R10, RDX	# spill
022   	addq    R10, RCX	# ptr
025   	movq    R9, [R10]	# long
028   	MEMBAR-acquire ! (empty encoding)
028   	
028   	MEMBAR-release ! (empty encoding)
028   	
028   	movq    RBX, R8	# spill
02b   	addq    RBX, R9	# long
02e   	movq    RAX, R9	# spill
031   	cmpxchgq [R10],RBX	# If rax == [R10] then store RBX into [R10]
	sete    R10
	movzbl  R10, R10
03e   	
03e   	MEMBAR-acquire ! (empty encoding)
03e   	testl   R10, R10
041   	je,s   B3  P=0,000000 C=6700,000000
041
043   B2: #	N73 &lt;- B1  Freq: 1
043   	movq    RAX, R9	# spill
046   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

051   	ret
051
052   B3: #	N73 &lt;- B1  Freq: 4,76837e-07
052   	movl    RSI, #-163	# int
057   	movq    RBP, R11	# spill
05a   	movq    [rsp + #0], RDX	# spill
05e   	movq    [rsp + #8], RCX	# spill
063   	movq    [rsp + #16], R8	# spill
068   	movq    [rsp + #24], R9	# spill
06d   	movl    [rsp + #32], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
073   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # sun.misc.Unsafe::getAndAddLong @ bci:21  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=_ L[6]=rsp + #24 L[7]=_ STK[0]=rsp + #32
        # OopMap{rbp=Oop [0]=Oop off=120}
078   	int3	# ShouldNotReachHere
078

</opto_assembly>
<opto_assembly compile_id='17'>
{method}
 - this oop:          0x00007fffacadec68
 - method holder:     &apos;java/util/concurrent/atomic/AtomicLong&apos;
 - constants:         0x00007fffacadd608 constant pool [148] {0x00007fffacadd608} for &apos;java/util/concurrent/atomic/AtomicLong&apos; cache=0x00007fffacadf140
 - access:            0x81000001  public 
 - name:              &apos;longValue&apos;
 - signature:         &apos;()J&apos;
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       12
 - vtable index:      8
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00c8398: 0xb0000000 i2c: 0x00007fffed1461a0 c2i: 0x00007fffed1462d7 c2iUV: 0x00007fffed1462ad
 - compiled entry     0x00007fffed1462d7
 - code size:         5
 - code start:        0x00007fffacadec50
 - code end (excl):   0x00007fffacadec55
 - method data:       0x00007fffacc1e318
 - checked ex length: 0
 - linenumber start:  0x00007fffacadec55
 - localvar length:   1
 - localvar start:    0x00007fffacadec5a
#
#  long/half ( java/util/concurrent/atomic/AtomicLong:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/util/concurrent/atomic/AtomicLong:NotNull *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N19: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   		cmpq    rax, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 4 bytes pad for loops and calls

010   B1: #	N19 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

01c   	movq    RAX, [RSI + #16 (8-bit)]	# long ! Field: volatile java/util/concurrent/atomic/AtomicLong.value
020   	MEMBAR-acquire ! (empty encoding)
020   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

02b   	ret
02b

</opto_assembly>
<opto_assembly compile_id='18'>
{method}
 - this oop:          0x00007fffacadde80
 - method holder:     &apos;java/util/concurrent/atomic/AtomicLong&apos;
 - constants:         0x00007fffacadd608 constant pool [148] {0x00007fffacadd608} for &apos;java/util/concurrent/atomic/AtomicLong&apos; cache=0x00007fffacadf140
 - access:            0x81000011  public final 
 - name:              &apos;get&apos;
 - signature:         &apos;()J&apos;
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       12
 - vtable index:      -2
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00c8398: 0xb0000000 i2c: 0x00007fffed1461a0 c2i: 0x00007fffed1462d7 c2iUV: 0x00007fffed1462ad
 - compiled entry     0x00007fffed1462d7
 - code size:         5
 - code start:        0x00007fffacadde68
 - code end (excl):   0x00007fffacadde6d
 - method data:       0x00007fffacc1e4c8
 - checked ex length: 0
 - linenumber start:  0x00007fffacadde6d
 - localvar length:   1
 - localvar start:    0x00007fffacadde72
#
#  long/half ( java/util/concurrent/atomic/AtomicLong:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/util/concurrent/atomic/AtomicLong:NotNull *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N19: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   		cmpq    rax, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 4 bytes pad for loops and calls

010   B1: #	N19 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

01c   	movq    RAX, [RSI + #16 (8-bit)]	# long ! Field: volatile java/util/concurrent/atomic/AtomicLong.value
020   	MEMBAR-acquire ! (empty encoding)
020   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

02b   	ret
02b

</opto_assembly>
<opto_assembly compile_id='19'>
{method}
 - this oop:          0x00007fffacd21770
 - method holder:     &apos;AtomicLongTest&apos;
 - constants:         0x00007fffacd210a0 constant pool [103] {0x00007fffacd210a0} for &apos;AtomicLongTest&apos; cache=0x00007fffacd21b88
 - access:            0x81000008  static 
 - name:              &apos;printOK&apos;
 - signature:         &apos;()V&apos;
 - max stack:         5
 - max locals:        0
 - size of params:    0
 - method size:       12
 - vtable index:      -2
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00c87d0: 0x i2c: 0x00007fffed149620 c2i: 0x00007fffed149753 c2iUV: 0x00007fffed149729
 - compiled entry     0x00007fffed149753
 - code size:         47
 - code start:        0x00007fffacd21730
 - code end (excl):   0x00007fffacd2175f
 - method data:       0x00007fffacd22438
 - checked ex length: 0
 - linenumber start:  0x00007fffacd2175f
 - localvar length:   0
#
#  void (  )
#
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 &lt;- B3 B2  Freq: 1
abababab
000   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c   	movq    R10, java/lang/Class:exact *	# ptr
016   	movzbl  R11, [R10 + #192 (32-bit)]	# ubyte ! Field: AtomicLongTest.ok
01e   	testl   R11, R11
021   	je,s   B3  P=0,000000 C=6700,000000
021
023   B2: #	N1 &lt;- B1  Freq: 1
023   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

02e   	ret
02e
02f   B3: #	N1 &lt;- B1  Freq: 4,76837e-07
02f   	movl    RSI, #-163	# int
034   	movl    RBP, R11	# spill
037   	call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos;)
        # AtomicLongTest::printOK @ bci:3  STK[0]=RBP
        # OopMap{off=60}
03c   	int3	# ShouldNotReachHere
03c

</opto_assembly>
<opto_assembly compile_id='20'>
{method}
 - this oop:          0x00007fffacd215b0
 - method holder:     &apos;AtomicLongTest&apos;
 - constants:         0x00007fffacd210a0 constant pool [103] {0x00007fffacd210a0} for &apos;AtomicLongTest&apos; cache=0x00007fffacd21b88
 - access:            0x81000008  static 
 - name:              &apos;update&apos;
 - signature:         &apos;()V&apos;
 - max stack:         5
 - max locals:        0
 - size of params:    0
 - method size:       12
 - highest level:     4
 - vtable index:      -2
 - i2i entry:         0x00007fffed01aa60
 - adapters:          AHE@0x00007ffff00c87d0: 0x i2c: 0x00007fffed149620 c2i: 0x00007fffed149753 c2iUV: 0x00007fffed149729
 - compiled entry     0x00007fffed149753
 - code size:         43
 - code start:        0x00007fffacd21578
 - code end (excl):   0x00007fffacd215a3
 - method data:       0x00007fffacd22208
 - checked ex length: 0
 - linenumber start:  0x00007fffacd215a3
 - localvar length:   0
#
#  void (  )
#
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
abababab   N1: #	B1 &lt;- B22 B31 B27 B28 B29 B30 B5 B41  Freq: 1
abababab
000   B1: #	B22 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang (384 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

00c   	movq    R10, #4294967296	# long
016   	movq    R11, java/lang/Class:exact *	# ptr
020   	addq    [R11 + #176 (32-bit)], R10	# long ! Field: AtomicLongTest.l
027   	movq    R10, java/lang/Class:exact *	# ptr
031   	movq    R10, [R10 + #160 (32-bit)]	# ptr ! Field: AtomicLongTest.al
038   	testq   R10, R10	# ptr
03b   	je     B22  P=0,000001 C=-1,000000
03b
041   B2: #	B31 B3 &lt;- B1  Freq: 0,999999
041   	MEMBAR-release ! (empty encoding)
041   	
041   	ADDQ  [[R10 + #16 (8-bit)]],#4294967296
047   	
047   	MEMBAR-acquire ! (empty encoding)
047   	movq    R10, java/lang/Class:exact *	# ptr
051   	movq    R10, [R10 + #160 (32-bit)]	# ptr ! Field: AtomicLongTest.al
058   	movq    R10, [R10 + #16 (8-bit)]	# long ! Field: volatile java/util/concurrent/atomic/AtomicLong.value
05c   	NullCheck R10
05c
05c   B3: #	B20 B4 &lt;- B2  Freq: 0,999998
05c   	movq    R11, [R11 + #176 (32-bit)]	# long ! Field: AtomicLongTest.l
063   	MEMBAR-acquire ! (empty encoding)
063   	cmpq    R11, R10
066   	jne     B20  P=0,000050 C=19999,000000
066
06c   B4: #	B6 B5 &lt;- B3  Freq: 0,999948
06c   	movq    R10, java/lang/Class:exact *	# ptr
076   	movzbl  R11, [R10 + #192 (32-bit)]	# ubyte ! Field: AtomicLongTest.ok
07e   	testl   R11, R11
081   	je,s   B6  P=0,000050 C=19997,000000
081
083   B5: #	N1 &lt;- B21 B19 B4  Freq: 0,999998
083   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

08e   	ret
08e
08f   B6: #	B23 B7 &lt;- B4  Freq: 5,00057e-05
08f   	# TLS is in R15
08f   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
093   	movq    R10, RAX	# spill
096   	addq    R10, #32	# ptr
09a   	movq    R11, java/lang/Class:exact *	# ptr
0a4   	movq    R8, [R11 + #168 (32-bit)]	# ptr ! Field: java/lang/System.out
0ab   	# TLS is in R15
0ab   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
0b2   	jnb,u  B23  P=0,000100 C=-1,000000
0b2
0b8   B7: #	B8 &lt;- B6  Freq: 5,00007e-05
0b8   	# TLS is in R15
0b8   	movq    [R15 + #112 (8-bit)], R10	# ptr
0bc   	PREFETCHNTA [R10 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
0c4   	movq    R10, precise klass java/lang/StringBuilder: 0x00007ffff012b750:Constant:exact *	# ptr
0ce   	movq    R11, [R10 + #176 (32-bit)]	# ptr
0d5   	movq    [RAX], R11	# ptr
0d8   	movq    [RAX + #8 (8-bit)], R10	# ptr
0dc   	movq    [RAX + #16 (8-bit)], #0	# long
0e4   	movq    [RAX + #24 (8-bit)], #0	# long
0e4
0ec   B8: #	B25 B9 &lt;- B24 B7  Freq: 5,00057e-05
0ec   	
0ec   	MEMBAR-storestore (empty encoding)
0ec   	movq    RBP, RAX	# spill
0ef   	# checkcastPP of RBP
0ef   	# TLS is in R15
0ef   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
0f3   	movq    R10, RAX	# spill
0f6   	addq    R10, #56	# ptr
0fa   	# TLS is in R15
0fa   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
101   	jnb,u  B25  P=0,000100 C=-1,000000
101
107   B9: #	B10 &lt;- B8  Freq: 5,00007e-05
107   	# TLS is in R15
107   	movq    [R15 + #112 (8-bit)], R10	# ptr
10b   	PREFETCHNTA [R10 + #256 (32-bit)]	# Prefetch allocation to non-temporal cache for write
113   	movq    [RAX], 0x0000000000000001	# ptr
11a   	PREFETCHNTA [R10 + #320 (32-bit)]	# Prefetch allocation to non-temporal cache for write
122   	PREFETCHNTA [R10 + #384 (32-bit)]	# Prefetch allocation to non-temporal cache for write
12a   	movq    R10, precise klass [C: 0x00007ffff01427c0:Constant:exact *	# ptr
134   	movq    [RAX + #8 (8-bit)], R10	# ptr
138   	movl    [RAX + #16 (8-bit)], #16	# int
13f   	movq    [RAX + #24 (8-bit)], #0	# long
147   	movq    [RAX + #32 (8-bit)], #0	# long
14f   	movq    [RAX + #40 (8-bit)], #0	# long
157   	movq    [RAX + #48 (8-bit)], #0	# long
15f   	movq    [rsp + #16], R8	# spill
15f
164   B10: #	B39 B11 &lt;- B26 B9  Freq: 5,00057e-05
164   	
164   	MEMBAR-storestore (empty encoding)
164   	# checkcastPP of RAX
164   	movq    [RBP + #24 (8-bit)], RAX	# ptr ! Field: java/lang/AbstractStringBuilder.value
168   	movq    R10, RBP	# ptr -&gt; long
16b   	shrq    R10, #9
16f   	movq    RDX, java/lang/String:exact *	# ptr
179   	movq    R11, 0x00007fbff48dc000	# ptr
183   	movb    [R11 + R10], #0	# byte
188   	movq    RSI, RBP	# spill
18b   	call,static  java.lang.StringBuilder::append
        # AtomicLongTest::printOK @ bci:18  STK[0]=rsp + #16
        # AtomicLongTest::update @ bci:33 
        # OopMap{[16]=Oop off=400}
190
190   B11: #	B27 B12 &lt;- B10  Freq: 5,00047e-05
        # Block is sole successor of call
190   	movq    R11, java/lang/Class:exact *	# ptr
19a   	movq    R11, [R11 + #168 (32-bit)]	# long ! Field: AtomicLongTest.count
1a1   	testq   RAX, RAX	# ptr
1a4   	je     B27  P=0,000001 C=-1,000000
1a4
1aa   B12: #	B38 B13 &lt;- B11  Freq: 5,00046e-05
1aa   	movq    RSI, RAX	# spill
1ad   	movq    RDX, R11	# spill
      	nop 	# 3 bytes pad for loops and calls
1b3   	call,static  java.lang.StringBuilder::append
        # AtomicLongTest::printOK @ bci:24  STK[0]=rsp + #16
        # AtomicLongTest::update @ bci:33 
        # OopMap{[16]=Oop off=440}
1b8
1b8   B13: #	B28 B14 &lt;- B12  Freq: 5,00036e-05
        # Block is sole successor of call
1b8   	testq   RAX, RAX	# ptr
1bb   	je     B28  P=0,000001 C=-1,000000
1bb
1c1   B14: #	B37 B15 &lt;- B13  Freq: 5,00036e-05
1c1   	movq    RDX, java/lang/String:exact *	# ptr
1cb   	movq    RSI, RAX	# spill
      	nop 	# 1 bytes pad for loops and calls
1cf   	call,static  java.lang.StringBuilder::append
        # AtomicLongTest::printOK @ bci:29  STK[0]=rsp + #16
        # AtomicLongTest::update @ bci:33 
        # OopMap{[16]=Oop off=468}
1d4
1d4   B15: #	B29 B16 &lt;- B14  Freq: 5,00026e-05
        # Block is sole successor of call
1d4   	testq   RAX, RAX	# ptr
1d7   	je     B29  P=0,000001 C=-1,000000
1d7
1dd   B16: #	B36 B17 &lt;- B15  Freq: 5,00025e-05
1dd   	movq    RSI, RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
1e3   	call,static  java.lang.StringBuilder::toString
        # AtomicLongTest::printOK @ bci:32  STK[0]=rsp + #16
        # AtomicLongTest::update @ bci:33 
        # OopMap{[16]=Oop off=488}
1e8
1e8   B17: #	B30 B18 &lt;- B16  Freq: 5,00015e-05
        # Block is sole successor of call
1e8   	movq    RBP, RAX	# spill
1eb   	movq    R10, [rsp + #16]	# spill
1f0   	testq   R10, R10	# ptr
1f3   	je     B30  P=0,000001 C=-1,000000
1f3
1f9   B18: #	B34 B19 &lt;- B17  Freq: 5,00015e-05
1f9   	movq    RSI, [rsp + #16]	# spill
1fe   	movq    RDX, RAX	# spill
      	nop 	# 2 bytes pad for loops and calls
203   	call,static  java.io.PrintStream::println
        # AtomicLongTest::printOK @ bci:35 
        # AtomicLongTest::update @ bci:33 
        # OopMap{off=520}
208
208   B19: #	B5 &lt;- B18  Freq: 5,00005e-05
        # Block is sole successor of call
208   	movq    R10, java/lang/Class:exact *	# ptr
212   	movb    [R10 + #193 (32-bit)], #0	# byte ! Field: AtomicLongTest.error
21a   	movb    [R10 + #192 (32-bit)], #1	# byte ! Field: AtomicLongTest.ok
222   	jmp     B5
222
227   B20: #	B35 B21 &lt;- B3  Freq: 5,00024e-05
227   	call,static  AtomicLongTest::printError
        # AtomicLongTest::update @ bci:39 
        # OopMap{off=556}
22c
22c   B21: #	B5 &lt;- B20  Freq: 5,00014e-05
        # Block is sole successor of call
22c   	jmp     B5
22c
231   B22: #	N1 &lt;- B1  Freq: 1,01328e-06
231   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
237   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # AtomicLongTest::update @ bci:16  STK[0]=#NULL STK[1]=#4294967296 STK[2]=_
        # OopMap{off=572}
23c   	int3	# ShouldNotReachHere
23c
241   B23: #	B32 B24 &lt;- B6  Freq: 5,0014e-09
241   	movq    RSI, precise klass java/lang/StringBuilder: 0x00007ffff012b750:Constant:exact *	# ptr
24b   	movq    [rsp + #0], R8	# spill
24f   	call,static  wrapper for: _new_instance_Java
        # AtomicLongTest::printOK @ bci:9  STK[0]=rsp + #0
        # AtomicLongTest::update @ bci:33 
        # OopMap{[0]=Oop off=596}
254
254   B24: #	B8 &lt;- B23  Freq: 5,0013e-09
        # Block is sole successor of call
254   	movq    R8, [rsp + #0]	# spill
258   	jmp     B8
258
25d   B25: #	B33 B26 &lt;- B8  Freq: 5,0014e-09
25d   	movl    RDX, #16	# int
262   	movq    RSI, precise klass [C: 0x00007ffff01427c0:Constant:exact *	# ptr
26c   	movq    [rsp + #16], R8	# spill
      	nop 	# 2 bytes pad for loops and calls
273   	call,static  wrapper for: _new_array_Java
        # java.lang.AbstractStringBuilder::&lt;init&gt; @ bci:6  L[0]=_ L[1]=_ STK[0]=RBP
        # java.lang.StringBuilder::&lt;init&gt; @ bci:3  L[0]=_
        # AtomicLongTest::printOK @ bci:13  STK[0]=rsp + #16 STK[1]=RBP
        # AtomicLongTest::update @ bci:33 
        # OopMap{rbp=Oop [16]=Oop off=632}
278
278   B26: #	B10 &lt;- B25  Freq: 5,0013e-09
        # Block is sole successor of call
278   	jmp     B10
278
27d   B27: #	N1 &lt;- B11  Freq: 5,06687e-11
27d   	movl    RSI, #-10	# int
282   	movq    RBP, R11	# spill
      	nop 	# 2 bytes pad for loops and calls
287   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # AtomicLongTest::printOK @ bci:24  STK[0]=_ STK[1]=#NULL STK[2]=RBP STK[3]=_
        # AtomicLongTest::update @ bci:33 
        # OopMap{off=652}
28c   	int3	# ShouldNotReachHere
28c
291   B28: #	N1 &lt;- B13  Freq: 5,06676e-11
291   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
297   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # AtomicLongTest::printOK @ bci:29  STK[0]=_ STK[1]=#NULL STK[2]=#Ptr0x00007fff880eac70
        # AtomicLongTest::update @ bci:33 
        # OopMap{off=668}
29c   	int3	# ShouldNotReachHere
29c
2a1   B29: #	N1 &lt;- B15  Freq: 5,06666e-11
2a1   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2a7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # AtomicLongTest::printOK @ bci:32  STK[0]=_ STK[1]=#NULL
        # AtomicLongTest::update @ bci:33 
        # OopMap{off=684}
2ac   	int3	# ShouldNotReachHere
2ac
2b1   B30: #	N1 &lt;- B17  Freq: 5,06655e-11
2b1   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2b7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # AtomicLongTest::printOK @ bci:35  STK[0]=#NULL STK[1]=RBP
        # AtomicLongTest::update @ bci:33 
        # OopMap{rbp=Oop off=700}
2bc   	int3	# ShouldNotReachHere
2bc
2c1   B31: #	N1 &lt;- B2  Freq: 1,01328e-06
2c1   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2c7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # AtomicLongTest::update @ bci:26  STK[0]=_ STK[1]=_ STK[2]=#NULL
        # OopMap{off=716}
2cc   	int3	# ShouldNotReachHere
2cc
2d1   B32: #	B40 &lt;- B23  Freq: 5,0014e-14
2d1   	# exception oop is in rax; no code emitted
2d1   	jmp,s   B40
2d1
2d3   B33: #	B40 &lt;- B25  Freq: 5,0014e-14
2d3   	# exception oop is in rax; no code emitted
2d3   	jmp,s   B40
2d3
2d5   B34: #	B40 &lt;- B18  Freq: 5,00015e-10
2d5   	# exception oop is in rax; no code emitted
2d5   	jmp,s   B40
2d5
2d7   B35: #	B41 &lt;- B20  Freq: 5,00024e-10
2d7   	# exception oop is in rax; no code emitted
2d7   	movq    RSI, RAX	# spill
2da   	jmp,s   B41
2da
2dc   B36: #	B40 &lt;- B16  Freq: 5,00025e-10
2dc   	# exception oop is in rax; no code emitted
2dc   	jmp,s   B40
2dc
2de   B37: #	B40 &lt;- B14  Freq: 5,00036e-10
2de   	# exception oop is in rax; no code emitted
2de   	jmp,s   B40
2de
2e0   B38: #	B40 &lt;- B12  Freq: 5,00046e-10
2e0   	# exception oop is in rax; no code emitted
2e0   	jmp,s   B40
2e0
2e2   B39: #	B40 &lt;- B10  Freq: 5,00057e-10
2e2   	# exception oop is in rax; no code emitted
2e2
2e2   B40: #	B41 &lt;- B32 B33 B39 B38 B37 B36 B34  Freq: 2,50028e-09
2e2   	movq    RSI, RAX	# spill
2e2
2e5   B41: #	N1 &lt;- B40 B35  Freq: 3,0003e-09
2e5   	addq    rsp, 48	# Destroy frame
	popq   rbp

2ea   	jmp     rethrow_stub
2ea

</opto_assembly>
<print_nmethod stamp='14,571'>
Compiled method (c2)   14570   20             AtomicLongTest::update (43 bytes)
 total in heap  [0x00007fffed19eb90,0x00007fffed19f630] = 2720
 relocation     [0x00007fffed19ecc0,0x00007fffed19ed48] = 136
 main code      [0x00007fffed19ed60,0x00007fffed19f060] = 768
 stub code      [0x00007fffed19f060,0x00007fffed19f0d0] = 112
 oops           [0x00007fffed19f0d0,0x00007fffed19f0e0] = 16
 metadata       [0x00007fffed19f0e0,0x00007fffed19f128] = 72
 scopes data    [0x00007fffed19f128,0x00007fffed19f268] = 320
 scopes pcs     [0x00007fffed19f268,0x00007fffed19f558] = 752
 dependencies   [0x00007fffed19f558,0x00007fffed19f560] = 8
 handler table  [0x00007fffed19f560,0x00007fffed19f620] = 192
 nul chk table  [0x00007fffed19f620,0x00007fffed19f630] = 16
Decoding compiled method 0x00007fffed19eb90:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fffacd215b0} &apos;update&apos; &apos;()V&apos; in &apos;AtomicLongTest&apos;
  #           [sp+0x40]  (sp of caller)
  ;; N1: #	B1 &lt;- B22 B31 B27 B28 B29 B30 B5 B41  Freq: 1

  ;; B1: #	B22 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffed19ed60: mov    %eax,-0x16000(%rsp)
  0x00007fffed19ed67: push   %rbp
  0x00007fffed19ed68: sub    $0x30,%rsp         ;*synchronization entry
                                                ; - AtomicLongTest::update@-1 (line 10)

  0x00007fffed19ed6c: movabs $0x100000000,%r10
  0x00007fffed19ed76: movabs $0x7fffd86bcf58,%r11  ;   {oop(a &apos;java/lang/Class&apos; = &apos;AtomicLongTest&apos;)}
  0x00007fffed19ed80: add    %r10,0xb0(%r11)    ;*putstatic l
                                                ; - AtomicLongTest::update@7 (line 10)

  0x00007fffed19ed87: movabs $0x7fffd86bcf58,%r10  ;   {oop(a &apos;java/lang/Class&apos; = &apos;AtomicLongTest&apos;)}
  0x00007fffed19ed91: mov    0xa0(%r10),%r10    ;*getstatic al
                                                ; - AtomicLongTest::update@10 (line 11)

  0x00007fffed19ed98: test   %r10,%r10
  0x00007fffed19ed9b: je     0x00007fffed19ef91
  ;; B2: #	B31 B3 &lt;- B1  Freq: 0,999999

  0x00007fffed19eda1: lock addq $0x0,0x10(%r10)  ;*invokevirtual getAndAddLong
                                                ; - java.util.concurrent.atomic.AtomicLong::addAndGet@8 (line 219)
                                                ; - AtomicLongTest::update@16 (line 11)

  0x00007fffed19eda7: movabs $0x7fffd86bcf58,%r10  ;   {oop(a &apos;java/lang/Class&apos; = &apos;AtomicLongTest&apos;)}
  0x00007fffed19edb1: mov    0xa0(%r10),%r10    ;*getstatic al
                                                ; - AtomicLongTest::update@23 (line 13)

  0x00007fffed19edb8: mov    0x10(%r10),%r10    ; implicit exception: dispatches to 0x00007fffed19f021
  ;; B3: #	B20 B4 &lt;- B2  Freq: 0,999998

  0x00007fffed19edbc: mov    0xb0(%r11),%r11    ;*getfield value
                                                ; - java.util.concurrent.atomic.AtomicLong::get@1 (line 105)
                                                ; - java.util.concurrent.atomic.AtomicLong::longValue@1 (line 329)
                                                ; - AtomicLongTest::update@26 (line 13)

  0x00007fffed19edc3: cmp    %r10,%r11
  0x00007fffed19edc6: jne    0x00007fffed19ef87  ;*ifne
                                                ; - AtomicLongTest::update@30 (line 13)

  ;; B4: #	B6 B5 &lt;- B3  Freq: 0,999948

  0x00007fffed19edcc: movabs $0x7fffd86bcf58,%r10  ;   {oop(a &apos;java/lang/Class&apos; = &apos;AtomicLongTest&apos;)}
  0x00007fffed19edd6: movzbl 0xc0(%r10),%r11d
  0x00007fffed19edde: test   %r11d,%r11d
  0x00007fffed19ede1: je     0x00007fffed19edef  ;*synchronization entry
                                                ; - AtomicLongTest::update@-1 (line 10)

  ;; B5: #	N1 &lt;- B21 B19 B4  Freq: 0,999998

  0x00007fffed19ede3: add    $0x30,%rsp
  0x00007fffed19ede7: pop    %rbp
  0x00007fffed19ede8: test   %eax,0xae58212(%rip)        # 0x00007ffff7ff7000
                                                ;   {poll_return}
  0x00007fffed19edee: retq   
  ;; B6: #	B23 B7 &lt;- B4  Freq: 5,00057e-05

  0x00007fffed19edef: mov    0x70(%r15),%rax
  0x00007fffed19edf3: mov    %rax,%r10
  0x00007fffed19edf6: add    $0x20,%r10
  0x00007fffed19edfa: movabs $0x7fffd8601328,%r11  ;   {oop(a &apos;java/lang/Class&apos; = &apos;java/lang/System&apos;)}
  0x00007fffed19ee04: mov    0xa8(%r11),%r8     ;*getstatic out
                                                ; - AtomicLongTest::printOK@6 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)

  0x00007fffed19ee0b: cmp    0x80(%r15),%r10
  0x00007fffed19ee12: jae    0x00007fffed19efa1
  ;; B7: #	B8 &lt;- B6  Freq: 5,00007e-05

  0x00007fffed19ee18: mov    %r10,0x70(%r15)
  0x00007fffed19ee1c: prefetchnta 0x100(%r10)
  0x00007fffed19ee24: movabs $0x7fffac9bd120,%r10  ;   {metadata(&apos;java/lang/StringBuilder&apos;)}
  0x00007fffed19ee2e: mov    0xb0(%r10),%r11
  0x00007fffed19ee35: mov    %r11,(%rax)
  0x00007fffed19ee38: mov    %r10,0x8(%rax)
  0x00007fffed19ee3c: movq   $0x0,0x10(%rax)
  0x00007fffed19ee44: movq   $0x0,0x18(%rax)
  ;; B8: #	B25 B9 &lt;- B24 B7  Freq: 5,00057e-05

  0x00007fffed19ee4c: mov    %rax,%rbp          ;*new  ; - AtomicLongTest::printOK@9 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)

  0x00007fffed19ee4f: mov    0x70(%r15),%rax
  0x00007fffed19ee53: mov    %rax,%r10
  0x00007fffed19ee56: add    $0x38,%r10
  0x00007fffed19ee5a: cmp    0x80(%r15),%r10
  0x00007fffed19ee61: jae    0x00007fffed19efbd
  ;; B9: #	B10 &lt;- B8  Freq: 5,00007e-05

  0x00007fffed19ee67: mov    %r10,0x70(%r15)
  0x00007fffed19ee6b: prefetchnta 0x100(%r10)
  0x00007fffed19ee73: movq   $0x1,(%rax)
  0x00007fffed19ee7a: prefetchnta 0x140(%r10)
  0x00007fffed19ee82: prefetchnta 0x180(%r10)
  0x00007fffed19ee8a: movabs $0x7fffac921210,%r10  ;   {metadata({type array char})}
  0x00007fffed19ee94: mov    %r10,0x8(%rax)
  0x00007fffed19ee98: movl   $0x10,0x10(%rax)
  0x00007fffed19ee9f: movq   $0x0,0x18(%rax)
  0x00007fffed19eea7: movq   $0x0,0x20(%rax)
  0x00007fffed19eeaf: movq   $0x0,0x28(%rax)
  0x00007fffed19eeb7: movq   $0x0,0x30(%rax)
  0x00007fffed19eebf: mov    %r8,0x10(%rsp)     ;*newarray
                                                ; - java.lang.AbstractStringBuilder::&lt;init&gt;@6 (line 68)
                                                ; - java.lang.StringBuilder::&lt;init&gt;@3 (line 89)
                                                ; - AtomicLongTest::printOK@13 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)

  ;; B10: #	B39 B11 &lt;- B26 B9  Freq: 5,00057e-05

  0x00007fffed19eec4: mov    %rax,0x18(%rbp)
  0x00007fffed19eec8: mov    %rbp,%r10
  0x00007fffed19eecb: shr    $0x9,%r10
  0x00007fffed19eecf: movabs $0x7fffd86be218,%rdx  ;   {oop(&quot;OK (iteration &quot;)}
  0x00007fffed19eed9: movabs $0x7fbff48dc000,%r11
  0x00007fffed19eee3: movb   $0x0,(%r11,%r10,1)  ;*invokespecial &lt;init&gt;
                                                ; - AtomicLongTest::printOK@13 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)

  0x00007fffed19eee8: mov    %rbp,%rsi
  0x00007fffed19eeeb: callq  0x00007fffed106100  ; OopMap{[16]=Oop off=400}
                                                ;*invokevirtual append
                                                ; - AtomicLongTest::printOK@18 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {optimized virtual_call}
  ;; B11: #	B27 B12 &lt;- B10  Freq: 5,00047e-05

  0x00007fffed19eef0: movabs $0x7fffd86bcf58,%r11  ;   {oop(a &apos;java/lang/Class&apos; = &apos;AtomicLongTest&apos;)}
  0x00007fffed19eefa: mov    0xa8(%r11),%r11    ;*getstatic count
                                                ; - AtomicLongTest::printOK@21 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)

  0x00007fffed19ef01: test   %rax,%rax
  0x00007fffed19ef04: je     0x00007fffed19efdd
  ;; B12: #	B38 B13 &lt;- B11  Freq: 5,00046e-05

  0x00007fffed19ef0a: mov    %rax,%rsi
  0x00007fffed19ef0d: mov    %r11,%rdx
  0x00007fffed19ef10: nop
  0x00007fffed19ef11: nop
  0x00007fffed19ef12: nop
  0x00007fffed19ef13: callq  0x00007fffed106100  ; OopMap{[16]=Oop off=440}
                                                ;*invokevirtual append
                                                ; - AtomicLongTest::printOK@24 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {optimized virtual_call}
  ;; B13: #	B28 B14 &lt;- B12  Freq: 5,00036e-05

  0x00007fffed19ef18: test   %rax,%rax
  0x00007fffed19ef1b: je     0x00007fffed19eff1
  ;; B14: #	B37 B15 &lt;- B13  Freq: 5,00036e-05

  0x00007fffed19ef21: movabs $0x7fffd867af78,%rdx  ;   {oop(&quot;)&quot;)}
  0x00007fffed19ef2b: mov    %rax,%rsi
  0x00007fffed19ef2e: nop
  0x00007fffed19ef2f: callq  0x00007fffed106100  ; OopMap{[16]=Oop off=468}
                                                ;*invokevirtual append
                                                ; - AtomicLongTest::printOK@29 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {optimized virtual_call}
  ;; B15: #	B29 B16 &lt;- B14  Freq: 5,00026e-05

  0x00007fffed19ef34: test   %rax,%rax
  0x00007fffed19ef37: je     0x00007fffed19f001
  ;; B16: #	B36 B17 &lt;- B15  Freq: 5,00025e-05

  0x00007fffed19ef3d: mov    %rax,%rsi
  0x00007fffed19ef40: nop
  0x00007fffed19ef41: nop
  0x00007fffed19ef42: nop
  0x00007fffed19ef43: callq  0x00007fffed106100  ; OopMap{[16]=Oop off=488}
                                                ;*invokevirtual toString
                                                ; - AtomicLongTest::printOK@32 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {optimized virtual_call}
  ;; B17: #	B30 B18 &lt;- B16  Freq: 5,00015e-05

  0x00007fffed19ef48: mov    %rax,%rbp
  0x00007fffed19ef4b: mov    0x10(%rsp),%r10
  0x00007fffed19ef50: test   %r10,%r10
  0x00007fffed19ef53: je     0x00007fffed19f011
  ;; B18: #	B34 B19 &lt;- B17  Freq: 5,00015e-05

  0x00007fffed19ef59: mov    0x10(%rsp),%rsi
  0x00007fffed19ef5e: mov    %rax,%rdx
  0x00007fffed19ef61: nop
  0x00007fffed19ef62: nop
  0x00007fffed19ef63: callq  0x00007fffed106100  ; OopMap{off=520}
                                                ;*invokevirtual println
                                                ; - AtomicLongTest::printOK@35 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {optimized virtual_call}
  ;; B19: #	B5 &lt;- B18  Freq: 5,00005e-05

  0x00007fffed19ef68: movabs $0x7fffd86bcf58,%r10  ;   {oop(a &apos;java/lang/Class&apos; = &apos;AtomicLongTest&apos;)}
  0x00007fffed19ef72: movb   $0x0,0xc1(%r10)    ;*putstatic error
                                                ; - AtomicLongTest::printOK@43 (line 33)
                                                ; - AtomicLongTest::update@33 (line 14)

  0x00007fffed19ef7a: movb   $0x1,0xc0(%r10)    ;*putstatic ok
                                                ; - AtomicLongTest::printOK@39 (line 32)
                                                ; - AtomicLongTest::update@33 (line 14)

  0x00007fffed19ef82: jmpq   0x00007fffed19ede3
  ;; B20: #	B35 B21 &lt;- B3  Freq: 5,00024e-05

  0x00007fffed19ef87: callq  0x00007fffed106600  ; OopMap{off=556}
                                                ;*invokestatic printError
                                                ; - AtomicLongTest::update@39 (line 17)
                                                ;   {static_call}
  ;; B21: #	B5 &lt;- B20  Freq: 5,00014e-05

  0x00007fffed19ef8c: jmpq   0x00007fffed19ede3
  ;; B22: #	N1 &lt;- B1  Freq: 1,01328e-06

  0x00007fffed19ef91: mov    $0xfffffff6,%esi
  0x00007fffed19ef96: nop
  0x00007fffed19ef97: callq  0x00007fffed107760  ; OopMap{off=572}
                                                ;*invokevirtual addAndGet
                                                ; - AtomicLongTest::update@16 (line 11)
                                                ;   {runtime_call}
  0x00007fffed19ef9c: callq  0x00007ffff6894940  ;*invokevirtual addAndGet
                                                ; - AtomicLongTest::update@16 (line 11)
                                                ;   {runtime_call}
  ;; B23: #	B32 B24 &lt;- B6  Freq: 5,0014e-09

  0x00007fffed19efa1: movabs $0x7fffac9bd120,%rsi  ;   {metadata(&apos;java/lang/StringBuilder&apos;)}
  0x00007fffed19efab: mov    %r8,(%rsp)
  0x00007fffed19efaf: callq  0x00007fffed1658e0  ; OopMap{[0]=Oop off=596}
                                                ;*new  ; - AtomicLongTest::printOK@9 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {runtime_call}
  ;; B24: #	B8 &lt;- B23  Freq: 5,0013e-09

  0x00007fffed19efb4: mov    (%rsp),%r8
  0x00007fffed19efb8: jmpq   0x00007fffed19ee4c  ;*invokespecial &lt;init&gt;
                                                ; - java.lang.AbstractStringBuilder::&lt;init&gt;@1 (line 67)
                                                ; - java.lang.StringBuilder::&lt;init&gt;@3 (line 89)
                                                ; - AtomicLongTest::printOK@13 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)

  ;; B25: #	B33 B26 &lt;- B8  Freq: 5,0014e-09

  0x00007fffed19efbd: mov    $0x10,%edx
  0x00007fffed19efc2: movabs $0x7fffac921210,%rsi  ;   {metadata({type array char})}
  0x00007fffed19efcc: mov    %r8,0x10(%rsp)
  0x00007fffed19efd1: nop
  0x00007fffed19efd2: nop
  0x00007fffed19efd3: callq  0x00007fffed1657e0  ; OopMap{rbp=Oop [16]=Oop off=632}
                                                ;*newarray
                                                ; - java.lang.AbstractStringBuilder::&lt;init&gt;@6 (line 68)
                                                ; - java.lang.StringBuilder::&lt;init&gt;@3 (line 89)
                                                ; - AtomicLongTest::printOK@13 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {runtime_call}
  ;; B26: #	B10 &lt;- B25  Freq: 5,0013e-09

  0x00007fffed19efd8: jmpq   0x00007fffed19eec4
  ;; B27: #	N1 &lt;- B11  Freq: 5,06687e-11

  0x00007fffed19efdd: mov    $0xfffffff6,%esi
  0x00007fffed19efe2: mov    %r11,%rbp
  0x00007fffed19efe5: nop
  0x00007fffed19efe6: nop
  0x00007fffed19efe7: callq  0x00007fffed107760  ; OopMap{off=652}
                                                ;*invokevirtual append
                                                ; - AtomicLongTest::printOK@24 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {runtime_call}
  0x00007fffed19efec: callq  0x00007ffff6894940  ;*invokevirtual append
                                                ; - AtomicLongTest::printOK@24 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {runtime_call}
  ;; B28: #	N1 &lt;- B13  Freq: 5,06676e-11

  0x00007fffed19eff1: mov    $0xfffffff6,%esi
  0x00007fffed19eff6: nop
  0x00007fffed19eff7: callq  0x00007fffed107760  ; OopMap{off=668}
                                                ;*invokevirtual append
                                                ; - AtomicLongTest::printOK@29 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {runtime_call}
  0x00007fffed19effc: callq  0x00007ffff6894940  ;*invokevirtual append
                                                ; - AtomicLongTest::printOK@29 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {runtime_call}
  ;; B29: #	N1 &lt;- B15  Freq: 5,06666e-11

  0x00007fffed19f001: mov    $0xfffffff6,%esi
  0x00007fffed19f006: nop
  0x00007fffed19f007: callq  0x00007fffed107760  ; OopMap{off=684}
                                                ;*invokevirtual toString
                                                ; - AtomicLongTest::printOK@32 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {runtime_call}
  0x00007fffed19f00c: callq  0x00007ffff6894940  ;*invokevirtual toString
                                                ; - AtomicLongTest::printOK@32 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {runtime_call}
  ;; B30: #	N1 &lt;- B17  Freq: 5,06655e-11

  0x00007fffed19f011: mov    $0xfffffff6,%esi
  0x00007fffed19f016: nop
  0x00007fffed19f017: callq  0x00007fffed107760  ; OopMap{rbp=Oop off=700}
                                                ;*invokevirtual println
                                                ; - AtomicLongTest::printOK@35 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {runtime_call}
  0x00007fffed19f01c: callq  0x00007ffff6894940  ;*invokevirtual println
                                                ; - AtomicLongTest::printOK@35 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {runtime_call}
  ;; B31: #	N1 &lt;- B2  Freq: 1,01328e-06

  0x00007fffed19f021: mov    $0xfffffff6,%esi
  0x00007fffed19f026: nop
  0x00007fffed19f027: callq  0x00007fffed107760  ; OopMap{off=716}
                                                ;*invokevirtual longValue
                                                ; - AtomicLongTest::update@26 (line 13)
                                                ;   {runtime_call}
  0x00007fffed19f02c: callq  0x00007ffff6894940  ;*new
                                                ; - AtomicLongTest::printOK@9 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {runtime_call}
  ;; B32: #	B40 &lt;- B23  Freq: 5,0014e-14

  0x00007fffed19f031: jmp    0x00007fffed19f042  ;*newarray
                                                ; - java.lang.AbstractStringBuilder::&lt;init&gt;@6 (line 68)
                                                ; - java.lang.StringBuilder::&lt;init&gt;@3 (line 89)
                                                ; - AtomicLongTest::printOK@13 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)

  ;; B33: #	B40 &lt;- B25  Freq: 5,0014e-14

  0x00007fffed19f033: jmp    0x00007fffed19f042  ;*invokevirtual println
                                                ; - AtomicLongTest::printOK@35 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)

  ;; B34: #	B40 &lt;- B18  Freq: 5,00015e-10

  0x00007fffed19f035: jmp    0x00007fffed19f042  ;*invokestatic printError
                                                ; - AtomicLongTest::update@39 (line 17)

  ;; B35: #	B41 &lt;- B20  Freq: 5,00024e-10

  0x00007fffed19f037: mov    %rax,%rsi
  0x00007fffed19f03a: jmp    0x00007fffed19f045  ;*invokevirtual toString
                                                ; - AtomicLongTest::printOK@32 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)

  ;; B36: #	B40 &lt;- B16  Freq: 5,00025e-10

  0x00007fffed19f03c: jmp    0x00007fffed19f042  ;*invokevirtual append
                                                ; - AtomicLongTest::printOK@29 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)

  ;; B37: #	B40 &lt;- B14  Freq: 5,00036e-10

  0x00007fffed19f03e: jmp    0x00007fffed19f042  ;*invokevirtual append
                                                ; - AtomicLongTest::printOK@24 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)

  ;; B38: #	B40 &lt;- B12  Freq: 5,00046e-10

  0x00007fffed19f040: jmp    0x00007fffed19f042  ;*invokespecial &lt;init&gt;
                                                ; - AtomicLongTest::printOK@13 (line 31)
                                                ; - AtomicLongTest::update@33 (line 14)

  ;; B39: #	B40 &lt;- B10  Freq: 5,00057e-10

  ;; B40: #	B41 &lt;- B32 B33 B39 B38 B37 B36 B34  Freq: 2,50028e-09

  0x00007fffed19f042: mov    %rax,%rsi          ;*invokestatic printError
                                                ; - AtomicLongTest::update@39 (line 17)

  ;; B41: #	N1 &lt;- B40 B35  Freq: 3,0003e-09

  0x00007fffed19f045: add    $0x30,%rsp
  0x00007fffed19f049: pop    %rbp
  0x00007fffed19f04a: jmpq   0x00007fffed166360  ;*return
                                                ; - AtomicLongTest::printOK@46 (line 35)
                                                ; - AtomicLongTest::update@33 (line 14)
                                                ;   {runtime_call}
  0x00007fffed19f04f: hlt    
  0x00007fffed19f050: hlt    
  0x00007fffed19f051: hlt    
  0x00007fffed19f052: hlt    
  0x00007fffed19f053: hlt    
  0x00007fffed19f054: hlt    
  0x00007fffed19f055: hlt    
  0x00007fffed19f056: hlt    
  0x00007fffed19f057: hlt    
  0x00007fffed19f058: hlt    
  0x00007fffed19f059: hlt    
  0x00007fffed19f05a: hlt    
  0x00007fffed19f05b: hlt    
  0x00007fffed19f05c: hlt    
  0x00007fffed19f05d: hlt    
  0x00007fffed19f05e: hlt    
  0x00007fffed19f05f: hlt    
[Stub Code]
  0x00007fffed19f060: movabs $0x0,%rbx          ;   {no_reloc}
  0x00007fffed19f06a: jmpq   0x00007fffed19f06a  ;   {runtime_call}
  0x00007fffed19f06f: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fffed19f079: jmpq   0x00007fffed19f079  ;   {runtime_call}
  0x00007fffed19f07e: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fffed19f088: jmpq   0x00007fffed19f088  ;   {runtime_call}
  0x00007fffed19f08d: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fffed19f097: jmpq   0x00007fffed19f097  ;   {runtime_call}
  0x00007fffed19f09c: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fffed19f0a6: jmpq   0x00007fffed19f0a6  ;   {runtime_call}
  0x00007fffed19f0ab: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fffed19f0b5: jmpq   0x00007fffed19f0b5  ;   {runtime_call}
[Exception Handler]
  0x00007fffed19f0ba: jmpq   0x00007fffed1659e0  ;   {runtime_call}
[Deopt Handler Code]
  0x00007fffed19f0bf: callq  0x00007fffed19f0c4
  0x00007fffed19f0c4: subq   $0x5,(%rsp)
  0x00007fffed19f0c9: jmpq   0x00007fffed107220  ;   {runtime_call}
  0x00007fffed19f0ce: hlt    
  0x00007fffed19f0cf: hlt    
pc-bytecode offsets:
PcDesc(pc=0x7fffed19ed5f offset=ffffffff bits=0):
PcDesc(pc=0x7fffed19ed6c offset=c bits=0):
   AtomicLongTest::update  @-1
PcDesc(pc=0x7fffed19ed87 offset=27 bits=0):
   AtomicLongTest::update  @7
PcDesc(pc=0x7fffed19ed98 offset=38 bits=0):
   AtomicLongTest::update  @10
PcDesc(pc=0x7fffed19eda7 offset=47 bits=0):
   java.util.concurrent.atomic.AtomicLong::addAndGet  @8
   AtomicLongTest::update  @16
PcDesc(pc=0x7fffed19edb8 offset=58 bits=0):
   AtomicLongTest::update  @23
PcDesc(pc=0x7fffed19edc3 offset=63 bits=0):
   java.util.concurrent.atomic.AtomicLong::get  @1
   java.util.concurrent.atomic.AtomicLong::longValue  @1
   AtomicLongTest::update  @26
PcDesc(pc=0x7fffed19edcc offset=6c bits=0):
   AtomicLongTest::update  @30
PcDesc(pc=0x7fffed19ede3 offset=83 bits=0):
   AtomicLongTest::update  @-1
PcDesc(pc=0x7fffed19ee0b offset=ab bits=0):
   AtomicLongTest::printOK  @6
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19ee4f offset=ef bits=0):
   AtomicLongTest::printOK  @9
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19eec4 offset=164 bits=0):
   java.lang.AbstractStringBuilder::&lt;init&gt;  @6
   java.lang.StringBuilder::&lt;init&gt;  @3
   AtomicLongTest::printOK  @13
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19eee8 offset=188 bits=0):
   AtomicLongTest::printOK  @13
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19eef0 offset=190 bits=4):
   AtomicLongTest::printOK  @18
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19ef01 offset=1a1 bits=0):
   AtomicLongTest::printOK  @21
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19ef18 offset=1b8 bits=4):
   AtomicLongTest::printOK  @24
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19ef34 offset=1d4 bits=4):
   AtomicLongTest::printOK  @29
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19ef48 offset=1e8 bits=4):
   AtomicLongTest::printOK  @32
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19ef68 offset=208 bits=0):
   AtomicLongTest::printOK  @35
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19ef7a offset=21a bits=0):
   AtomicLongTest::printOK  @43
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19ef82 offset=222 bits=0):
   AtomicLongTest::printOK  @39
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19ef8c offset=22c bits=0):
   AtomicLongTest::update  @39
PcDesc(pc=0x7fffed19ef9c offset=23c bits=0):
   AtomicLongTest::update  @16
PcDesc(pc=0x7fffed19efa1 offset=241 bits=0):
   AtomicLongTest::update  @16
PcDesc(pc=0x7fffed19efb4 offset=254 bits=4):
   AtomicLongTest::printOK  @9
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19efbd offset=25d bits=0):
   java.lang.AbstractStringBuilder::&lt;init&gt;  @1
   java.lang.StringBuilder::&lt;init&gt;  @3
   AtomicLongTest::printOK  @13
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19efd8 offset=278 bits=4):
   java.lang.AbstractStringBuilder::&lt;init&gt;  @6
   java.lang.StringBuilder::&lt;init&gt;  @3
   AtomicLongTest::printOK  @13
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19efec offset=28c bits=0):
   AtomicLongTest::printOK  @24
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19eff1 offset=291 bits=0):
   AtomicLongTest::printOK  @24
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19effc offset=29c bits=0):
   AtomicLongTest::printOK  @29
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19f001 offset=2a1 bits=0):
   AtomicLongTest::printOK  @29
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19f00c offset=2ac bits=0):
   AtomicLongTest::printOK  @32
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19f011 offset=2b1 bits=0):
   AtomicLongTest::printOK  @32
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19f01c offset=2bc bits=0):
   AtomicLongTest::printOK  @35
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19f021 offset=2c1 bits=0):
   AtomicLongTest::printOK  @35
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19f02c offset=2cc bits=0):
   AtomicLongTest::update  @26
PcDesc(pc=0x7fffed19f031 offset=2d1 bits=0):
   AtomicLongTest::printOK  @9
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19f033 offset=2d3 bits=0):
   java.lang.AbstractStringBuilder::&lt;init&gt;  @6
   java.lang.StringBuilder::&lt;init&gt;  @3
   AtomicLongTest::printOK  @13
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19f035 offset=2d5 bits=0):
   AtomicLongTest::printOK  @35
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19f037 offset=2d7 bits=0):
   AtomicLongTest::update  @39
PcDesc(pc=0x7fffed19f03c offset=2dc bits=0):
   AtomicLongTest::printOK  @32
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19f03e offset=2de bits=0):
   AtomicLongTest::printOK  @29
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19f040 offset=2e0 bits=0):
   AtomicLongTest::printOK  @24
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19f042 offset=2e2 bits=0):
   AtomicLongTest::printOK  @13
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19f045 offset=2e5 bits=0):
   AtomicLongTest::update  @39
PcDesc(pc=0x7fffed19f04f offset=2ef bits=0):
   AtomicLongTest::printOK  @46
   AtomicLongTest::update  @33
PcDesc(pc=0x7fffed19f0d1 offset=371 bits=0):
OopMapSet contains 14 OopMaps

#0 
OopMap{[16]=Oop off=400}
#1 
OopMap{[16]=Oop off=440}
#2 
OopMap{[16]=Oop off=468}
#3 
OopMap{[16]=Oop off=488}
#4 
OopMap{off=520}
#5 
OopMap{off=556}
#6 
OopMap{off=572}
#7 
OopMap{[0]=Oop off=596}
#8 
OopMap{rbp=Oop [16]=Oop off=632}
#9 
OopMap{off=652}
#10 
OopMap{off=668}
#11 
OopMap{off=684}
#12 
OopMap{rbp=Oop off=700}
#13 
OopMap{off=716}
</print_nmethod>
<writer thread='140737354000128'/>
C1 Runtime statistics:
 _resolve_invoke_virtual_cnt:     0
 _resolve_invoke_opt_virtual_cnt: 3
 _resolve_invoke_static_cnt:      2
 _handle_wrong_method_cnt:        0
 _ic_miss_cnt:                    0
 _generic_arraycopy_cnt:          0
 _generic_arraycopystub_cnt:      0
 _byte_arraycopy_cnt:             0
 _short_arraycopy_cnt:            0
 _int_arraycopy_cnt:              0
 _long_arraycopy_cnt:             0
 _primitive_arraycopy_cnt:        0
 _oop_arraycopy_cnt (C):          0
 _oop_arraycopy_cnt (stub):       0
 _arraycopy_slowcase_cnt:         0
 _arraycopy_checkcast_cnt:        0
 _arraycopy_checkcast_attempt_cnt:0
 _new_type_array_slowcase_cnt:    0
 _new_object_array_slowcase_cnt:  0
 _new_instance_slowcase_cnt:      0
 _new_multi_array_slowcase_cnt:   0
 _monitorenter_slowcase_cnt:      0
 _monitorexit_slowcase_cnt:       0
 _patch_code_slowcase_cnt:        0
 _throw_range_check_exception_count:            0:
 _throw_index_exception_count:                  0:
 _throw_div0_exception_count:                   0:
 _throw_null_pointer_exception_count:           0:
 _throw_class_cast_exception_count:             0:
 _throw_incompatible_class_change_error_count:  0:
 _throw_array_store_exception_count:            0:
 _throw_count:                                  0:

<statistics type='deoptimization'>
Deoptimization traps recorded:
     2 (100,0%) total
              unstable_if/reinterpret/ifne: 2 (100,0%)
</statistics>
<statistics type='SharedRuntime'>
    0 inline cache miss in compiled
    0 wrong method
    2 unresolved static call site
    0 unresolved virtual call site
    3 unresolved opt virtual call site
    6 slow partial subtype
   12 byte array copies
   12 short array copies
   12 int array copies
   12 long array copies
AdapterHandlerTable: empty 183 longest 4 total 146 average 1,327273
AdapterHandlerTable: lookups 6033 buckets 5942 equals 5615 hits 5615 compact 5615
</statistics>
<statistics type='nmethod'>
Statistics for 3 native nmethods:
 N. total size  = 3072
 N. relocation  = 264
 N. main code   = 1872
Statistics for 17 bytecoded nmethods:
 total in heap  = 22200
 relocation     = 616
 main code      = 5344
 stub code      = 560
 oops           = 56
 scopes data    = 2936
 scopes pcs     = 6288
 dependencies   = 144
 handler table  = 336
 nul chk table  = 136
Debug Data Chunks: 747, shared 98+254, non-SP&apos;s elided 5
PcDesc Statistics:  324 queries, 3,91 comparisons per query
  caches=17 queries=324/247, hits=182+2, tests=855+413, adds=140
</statistics>
<statistics type='opto'>
--- Compiler Statistics ---
Methods seen: 55  Methods parsed: 55  Nodes created: 10101
Blocks parsed: 121  Blocks seen: 215
99 original NULL checks - 82 elided (82%); optimizer leaves 32,
10 made implicit (31%)
CCP: 17  constants found: 0
Total frameslots = 144, Max frameslots = 32
Inserted 0 spill loads, 0 spill stores, 0 mem-mem moves and 0 copies.
Total load cost=      0, store cost =      0, mem-mem cost =  0,00, copy cost =     0.
Adjusted spill cost =       0.
Conservatively coalesced 69 copies, 0 pairs, 125 post alloc.
Used cisc instruction  5,  remained in register 102
Average allocation trips 1,272727
High Pressure Blocks = 0, Low Pressure Blocks = 0
Nops added 0 bytes to total of 7230 bytes, for 0,00%
Peephole: peephole rules applied: 0
PhaseIdealLoop=58, sum _unique=19634
</statistics>
<statistics type='intrinsic'>
Compiler intrinsic usage:
     1 (12,5%) _min (worked)
     0 ( 0,0%) _checkIndex (disabled)
     1 (12,5%) _getLongVolatile (worked)
     2 (25,0%) _getByte_raw (worked)
     1 (12,5%) _compareAndSwapLong (worked)
     3 (37,5%) _getAndAddLong (worked)
     8 (100,0%) total (worked,disabled)
</statistics>
------------------------------------------------------------------------
static AtomicLongTest::update()V
  interpreter_invocation_count:    19998 
  invocation_counter:               5000 
  backedge_counter:                    1 
  mdo size: 560 bytes

0 getstatic 2 &lt;AtomicLongTest.l/J&gt; 
3 ldc2_w 4294967296
6 ladd
7 putstatic 2 &lt;AtomicLongTest.l/J&gt; 
10 getstatic 6 &lt;AtomicLongTest.al/Ljava/util/concurrent/atomic/AtomicLong;&gt; 
13 ldc2_w 4294967296
16 invokevirtual 7 &lt;java/util/concurrent/atomic/AtomicLong.addAndGet(J)J&gt; 
  0   bci: 16   VirtualCallData     count(16699) entries(0)
19 pop2
20 getstatic 2 &lt;AtomicLongTest.l/J&gt; 
23 getstatic 6 &lt;AtomicLongTest.al/Ljava/util/concurrent/atomic/AtomicLong;&gt; 
26 invokevirtual 8 &lt;java/util/concurrent/atomic/AtomicLong.longValue()J&gt; 
  48  bci: 26   VirtualCallData     count(0) entries(1)
                                    &apos;java/util/concurrent/atomic/AtomicLong&apos;(16699 1,00)
29 lcmp
30 ifne 39
  96  bci: 30   BranchData          trap(intrinsic recompiled) flags(224) taken(1) displacement(72)
                                    not taken(16699)
33 invokestatic 9 &lt;AtomicLongTest.printOK()V&gt; 
  128 bci: 33   CounterData         count(16699)
36 goto 42
  144 bci: 36   JumpData            taken(16699) displacement(40)
39 invokestatic 10 &lt;AtomicLongTest.printError()V&gt; 
  168 bci: 39   CounterData         count(1)
42 return
------------------------------------------------------------------------
Total MDO size: 560 bytes
<writer thread='140736003536640'/>
<destroy_vm stamp='14,644'/>
<tty_done stamp='14,659'/>
</tty>
<hotspot_log_done stamp='14,659'/>
</hotspot_log>
